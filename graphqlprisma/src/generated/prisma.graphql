# source: http://192.168.99.100:4444
# timestamp: Wed Feb 20 2019 16:25:59 GMT+0100 (GMT+01:00)

type AggregateCarte {
  count: Int!
}

type AggregateCategory {
  count: Int!
}

type AggregateColis {
  count: Int!
}

type AggregateCommentProduct {
  count: Int!
}

type AggregateDelivery {
  count: Int!
}

type AggregateMessageClient {
  count: Int!
}

type AggregateOrder {
  count: Int!
}

type AggregatePhoto {
  count: Int!
}

type AggregatePhotoProduct {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregatePromotion {
  count: Int!
}

type AggregateReactionProduct {
  count: Int!
}

type AggregateStatus {
  count: Int!
}

type AggregateStock {
  count: Int!
}

type AggregateSupplier {
  count: Int!
}

type AggregateTarif {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Carte implements Node {
  id: ID!
  produit(where: ProductWhereInput): Product!
  commande(where: OrderWhereInput): Order!
  unitprice: Int
  totalprice: Int
  quantity: Int
}

"""A connection to a list of items."""
type CarteConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CarteEdge]!
  aggregate: AggregateCarte!
}

input CarteCreateInput {
  unitprice: Int
  totalprice: Int
  quantity: Int
  produit: ProductCreateOneWithoutCarteInput!
  commande: OrderCreateOneWithoutCarteInput!
}

input CarteCreateManyWithoutCommandeInput {
  create: [CarteCreateWithoutCommandeInput!]
  connect: [CarteWhereUniqueInput!]
}

input CarteCreateManyWithoutProduitInput {
  create: [CarteCreateWithoutProduitInput!]
  connect: [CarteWhereUniqueInput!]
}

input CarteCreateWithoutCommandeInput {
  unitprice: Int
  totalprice: Int
  quantity: Int
  produit: ProductCreateOneWithoutCarteInput!
}

input CarteCreateWithoutProduitInput {
  unitprice: Int
  totalprice: Int
  quantity: Int
  commande: OrderCreateOneWithoutCarteInput!
}

"""An edge in a connection."""
type CarteEdge {
  """The item at the end of the edge."""
  node: Carte!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CarteOrderByInput {
  id_ASC
  id_DESC
  unitprice_ASC
  unitprice_DESC
  totalprice_ASC
  totalprice_DESC
  quantity_ASC
  quantity_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CartePreviousValues {
  id: ID!
  unitprice: Int
  totalprice: Int
  quantity: Int
}

type CarteSubscriptionPayload {
  mutation: MutationType!
  node: Carte
  updatedFields: [String!]
  previousValues: CartePreviousValues
}

input CarteSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CarteSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CarteSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CarteSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CarteWhereInput
}

input CarteUpdateInput {
  unitprice: Int
  totalprice: Int
  quantity: Int
  produit: ProductUpdateOneWithoutCarteInput
  commande: OrderUpdateOneWithoutCarteInput
}

input CarteUpdateManyWithoutCommandeInput {
  create: [CarteCreateWithoutCommandeInput!]
  connect: [CarteWhereUniqueInput!]
  disconnect: [CarteWhereUniqueInput!]
  delete: [CarteWhereUniqueInput!]
  update: [CarteUpdateWithWhereUniqueWithoutCommandeInput!]
  upsert: [CarteUpsertWithWhereUniqueWithoutCommandeInput!]
}

input CarteUpdateManyWithoutProduitInput {
  create: [CarteCreateWithoutProduitInput!]
  connect: [CarteWhereUniqueInput!]
  disconnect: [CarteWhereUniqueInput!]
  delete: [CarteWhereUniqueInput!]
  update: [CarteUpdateWithWhereUniqueWithoutProduitInput!]
  upsert: [CarteUpsertWithWhereUniqueWithoutProduitInput!]
}

input CarteUpdateWithoutCommandeDataInput {
  unitprice: Int
  totalprice: Int
  quantity: Int
  produit: ProductUpdateOneWithoutCarteInput
}

input CarteUpdateWithoutProduitDataInput {
  unitprice: Int
  totalprice: Int
  quantity: Int
  commande: OrderUpdateOneWithoutCarteInput
}

input CarteUpdateWithWhereUniqueWithoutCommandeInput {
  where: CarteWhereUniqueInput!
  data: CarteUpdateWithoutCommandeDataInput!
}

input CarteUpdateWithWhereUniqueWithoutProduitInput {
  where: CarteWhereUniqueInput!
  data: CarteUpdateWithoutProduitDataInput!
}

input CarteUpsertWithWhereUniqueWithoutCommandeInput {
  where: CarteWhereUniqueInput!
  update: CarteUpdateWithoutCommandeDataInput!
  create: CarteCreateWithoutCommandeInput!
}

input CarteUpsertWithWhereUniqueWithoutProduitInput {
  where: CarteWhereUniqueInput!
  update: CarteUpdateWithoutProduitDataInput!
  create: CarteCreateWithoutProduitInput!
}

input CarteWhereInput {
  """Logical AND on all given filters."""
  AND: [CarteWhereInput!]

  """Logical OR on all given filters."""
  OR: [CarteWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CarteWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  unitprice: Int

  """All values that are not equal to given value."""
  unitprice_not: Int

  """All values that are contained in given list."""
  unitprice_in: [Int!]

  """All values that are not contained in given list."""
  unitprice_not_in: [Int!]

  """All values less than the given value."""
  unitprice_lt: Int

  """All values less than or equal the given value."""
  unitprice_lte: Int

  """All values greater than the given value."""
  unitprice_gt: Int

  """All values greater than or equal the given value."""
  unitprice_gte: Int
  totalprice: Int

  """All values that are not equal to given value."""
  totalprice_not: Int

  """All values that are contained in given list."""
  totalprice_in: [Int!]

  """All values that are not contained in given list."""
  totalprice_not_in: [Int!]

  """All values less than the given value."""
  totalprice_lt: Int

  """All values less than or equal the given value."""
  totalprice_lte: Int

  """All values greater than the given value."""
  totalprice_gt: Int

  """All values greater than or equal the given value."""
  totalprice_gte: Int
  quantity: Int

  """All values that are not equal to given value."""
  quantity_not: Int

  """All values that are contained in given list."""
  quantity_in: [Int!]

  """All values that are not contained in given list."""
  quantity_not_in: [Int!]

  """All values less than the given value."""
  quantity_lt: Int

  """All values less than or equal the given value."""
  quantity_lte: Int

  """All values greater than the given value."""
  quantity_gt: Int

  """All values greater than or equal the given value."""
  quantity_gte: Int
  produit: ProductWhereInput
  commande: OrderWhereInput
}

input CarteWhereUniqueInput {
  id: ID
}

type Category implements Node {
  id: ID!
  libelle: String
  produit(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
  promotion(where: PromotionWhereInput, orderBy: PromotionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Promotion!]
}

"""A connection to a list of items."""
type CategoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  libelle: String
  produit: ProductCreateManyWithoutCategoryInput
  promotion: PromotionCreateManyWithoutCategorieInput
}

input CategoryCreateOneWithoutProduitInput {
  create: CategoryCreateWithoutProduitInput
  connect: CategoryWhereUniqueInput
}

input CategoryCreateOneWithoutPromotionInput {
  create: CategoryCreateWithoutPromotionInput
  connect: CategoryWhereUniqueInput
}

input CategoryCreateWithoutProduitInput {
  libelle: String
  promotion: PromotionCreateManyWithoutCategorieInput
}

input CategoryCreateWithoutPromotionInput {
  libelle: String
  produit: ProductCreateManyWithoutCategoryInput
}

"""An edge in a connection."""
type CategoryEdge {
  """The item at the end of the edge."""
  node: Category!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
  libelle_ASC
  libelle_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CategoryPreviousValues {
  id: ID!
  libelle: String
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CategorySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CategorySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CategorySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
}

input CategoryUpdateInput {
  libelle: String
  produit: ProductUpdateManyWithoutCategoryInput
  promotion: PromotionUpdateManyWithoutCategorieInput
}

input CategoryUpdateOneWithoutProduitInput {
  create: CategoryCreateWithoutProduitInput
  connect: CategoryWhereUniqueInput
  delete: Boolean
  update: CategoryUpdateWithoutProduitDataInput
  upsert: CategoryUpsertWithoutProduitInput
}

input CategoryUpdateOneWithoutPromotionInput {
  create: CategoryCreateWithoutPromotionInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CategoryUpdateWithoutPromotionDataInput
  upsert: CategoryUpsertWithoutPromotionInput
}

input CategoryUpdateWithoutProduitDataInput {
  libelle: String
  promotion: PromotionUpdateManyWithoutCategorieInput
}

input CategoryUpdateWithoutPromotionDataInput {
  libelle: String
  produit: ProductUpdateManyWithoutCategoryInput
}

input CategoryUpsertWithoutProduitInput {
  update: CategoryUpdateWithoutProduitDataInput!
  create: CategoryCreateWithoutProduitInput!
}

input CategoryUpsertWithoutPromotionInput {
  update: CategoryUpdateWithoutPromotionDataInput!
  create: CategoryCreateWithoutPromotionInput!
}

input CategoryWhereInput {
  """Logical AND on all given filters."""
  AND: [CategoryWhereInput!]

  """Logical OR on all given filters."""
  OR: [CategoryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CategoryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  libelle: String

  """All values that are not equal to given value."""
  libelle_not: String

  """All values that are contained in given list."""
  libelle_in: [String!]

  """All values that are not contained in given list."""
  libelle_not_in: [String!]

  """All values less than the given value."""
  libelle_lt: String

  """All values less than or equal the given value."""
  libelle_lte: String

  """All values greater than the given value."""
  libelle_gt: String

  """All values greater than or equal the given value."""
  libelle_gte: String

  """All values containing the given string."""
  libelle_contains: String

  """All values not containing the given string."""
  libelle_not_contains: String

  """All values starting with the given string."""
  libelle_starts_with: String

  """All values not starting with the given string."""
  libelle_not_starts_with: String

  """All values ending with the given string."""
  libelle_ends_with: String

  """All values not ending with the given string."""
  libelle_not_ends_with: String
  produit_every: ProductWhereInput
  produit_some: ProductWhereInput
  produit_none: ProductWhereInput
  promotion_every: PromotionWhereInput
  promotion_some: PromotionWhereInput
  promotion_none: PromotionWhereInput
}

input CategoryWhereUniqueInput {
  id: ID
}

type Colis implements Node {
  id: ID!
  produit(where: ProductWhereInput): Product!
  unite: String!
  quantity: Int
}

"""A connection to a list of items."""
type ColisConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ColisEdge]!
  aggregate: AggregateColis!
}

input ColisCreateInput {
  unite: String!
  quantity: Int
  produit: ProductCreateOneWithoutColisInput!
}

input ColisCreateManyWithoutProduitInput {
  create: [ColisCreateWithoutProduitInput!]
  connect: [ColisWhereUniqueInput!]
}

input ColisCreateWithoutProduitInput {
  unite: String!
  quantity: Int
}

"""An edge in a connection."""
type ColisEdge {
  """The item at the end of the edge."""
  node: Colis!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ColisOrderByInput {
  id_ASC
  id_DESC
  unite_ASC
  unite_DESC
  quantity_ASC
  quantity_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ColisPreviousValues {
  id: ID!
  unite: String!
  quantity: Int
}

type ColisSubscriptionPayload {
  mutation: MutationType!
  node: Colis
  updatedFields: [String!]
  previousValues: ColisPreviousValues
}

input ColisSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ColisSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ColisSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ColisSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ColisWhereInput
}

input ColisUpdateInput {
  unite: String
  quantity: Int
  produit: ProductUpdateOneWithoutColisInput
}

input ColisUpdateManyWithoutProduitInput {
  create: [ColisCreateWithoutProduitInput!]
  connect: [ColisWhereUniqueInput!]
  disconnect: [ColisWhereUniqueInput!]
  delete: [ColisWhereUniqueInput!]
  update: [ColisUpdateWithWhereUniqueWithoutProduitInput!]
  upsert: [ColisUpsertWithWhereUniqueWithoutProduitInput!]
}

input ColisUpdateWithoutProduitDataInput {
  unite: String
  quantity: Int
}

input ColisUpdateWithWhereUniqueWithoutProduitInput {
  where: ColisWhereUniqueInput!
  data: ColisUpdateWithoutProduitDataInput!
}

input ColisUpsertWithWhereUniqueWithoutProduitInput {
  where: ColisWhereUniqueInput!
  update: ColisUpdateWithoutProduitDataInput!
  create: ColisCreateWithoutProduitInput!
}

input ColisWhereInput {
  """Logical AND on all given filters."""
  AND: [ColisWhereInput!]

  """Logical OR on all given filters."""
  OR: [ColisWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ColisWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  unite: String

  """All values that are not equal to given value."""
  unite_not: String

  """All values that are contained in given list."""
  unite_in: [String!]

  """All values that are not contained in given list."""
  unite_not_in: [String!]

  """All values less than the given value."""
  unite_lt: String

  """All values less than or equal the given value."""
  unite_lte: String

  """All values greater than the given value."""
  unite_gt: String

  """All values greater than or equal the given value."""
  unite_gte: String

  """All values containing the given string."""
  unite_contains: String

  """All values not containing the given string."""
  unite_not_contains: String

  """All values starting with the given string."""
  unite_starts_with: String

  """All values not starting with the given string."""
  unite_not_starts_with: String

  """All values ending with the given string."""
  unite_ends_with: String

  """All values not ending with the given string."""
  unite_not_ends_with: String
  quantity: Int

  """All values that are not equal to given value."""
  quantity_not: Int

  """All values that are contained in given list."""
  quantity_in: [Int!]

  """All values that are not contained in given list."""
  quantity_not_in: [Int!]

  """All values less than the given value."""
  quantity_lt: Int

  """All values less than or equal the given value."""
  quantity_lte: Int

  """All values greater than the given value."""
  quantity_gt: Int

  """All values greater than or equal the given value."""
  quantity_gte: Int
  produit: ProductWhereInput
}

input ColisWhereUniqueInput {
  id: ID
}

type CommentProduct implements Node {
  id: ID!
  produit(where: ProductWhereInput): Product!
  user(where: UserWhereInput): User!
  commentaire: String
  note: Int
}

"""A connection to a list of items."""
type CommentProductConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommentProductEdge]!
  aggregate: AggregateCommentProduct!
}

input CommentProductCreateInput {
  commentaire: String
  note: Int
  produit: ProductCreateOneWithoutCommentaireInput!
  user: UserCreateOneWithoutCommentproduitInput!
}

input CommentProductCreateManyWithoutProduitInput {
  create: [CommentProductCreateWithoutProduitInput!]
  connect: [CommentProductWhereUniqueInput!]
}

input CommentProductCreateManyWithoutUserInput {
  create: [CommentProductCreateWithoutUserInput!]
  connect: [CommentProductWhereUniqueInput!]
}

input CommentProductCreateWithoutProduitInput {
  commentaire: String
  note: Int
  user: UserCreateOneWithoutCommentproduitInput!
}

input CommentProductCreateWithoutUserInput {
  commentaire: String
  note: Int
  produit: ProductCreateOneWithoutCommentaireInput!
}

"""An edge in a connection."""
type CommentProductEdge {
  """The item at the end of the edge."""
  node: CommentProduct!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CommentProductOrderByInput {
  id_ASC
  id_DESC
  commentaire_ASC
  commentaire_DESC
  note_ASC
  note_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CommentProductPreviousValues {
  id: ID!
  commentaire: String
  note: Int
}

type CommentProductSubscriptionPayload {
  mutation: MutationType!
  node: CommentProduct
  updatedFields: [String!]
  previousValues: CommentProductPreviousValues
}

input CommentProductSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentProductSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentProductSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentProductSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CommentProductWhereInput
}

input CommentProductUpdateInput {
  commentaire: String
  note: Int
  produit: ProductUpdateOneWithoutCommentaireInput
  user: UserUpdateOneWithoutCommentproduitInput
}

input CommentProductUpdateManyWithoutProduitInput {
  create: [CommentProductCreateWithoutProduitInput!]
  connect: [CommentProductWhereUniqueInput!]
  disconnect: [CommentProductWhereUniqueInput!]
  delete: [CommentProductWhereUniqueInput!]
  update: [CommentProductUpdateWithWhereUniqueWithoutProduitInput!]
  upsert: [CommentProductUpsertWithWhereUniqueWithoutProduitInput!]
}

input CommentProductUpdateManyWithoutUserInput {
  create: [CommentProductCreateWithoutUserInput!]
  connect: [CommentProductWhereUniqueInput!]
  disconnect: [CommentProductWhereUniqueInput!]
  delete: [CommentProductWhereUniqueInput!]
  update: [CommentProductUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [CommentProductUpsertWithWhereUniqueWithoutUserInput!]
}

input CommentProductUpdateWithoutProduitDataInput {
  commentaire: String
  note: Int
  user: UserUpdateOneWithoutCommentproduitInput
}

input CommentProductUpdateWithoutUserDataInput {
  commentaire: String
  note: Int
  produit: ProductUpdateOneWithoutCommentaireInput
}

input CommentProductUpdateWithWhereUniqueWithoutProduitInput {
  where: CommentProductWhereUniqueInput!
  data: CommentProductUpdateWithoutProduitDataInput!
}

input CommentProductUpdateWithWhereUniqueWithoutUserInput {
  where: CommentProductWhereUniqueInput!
  data: CommentProductUpdateWithoutUserDataInput!
}

input CommentProductUpsertWithWhereUniqueWithoutProduitInput {
  where: CommentProductWhereUniqueInput!
  update: CommentProductUpdateWithoutProduitDataInput!
  create: CommentProductCreateWithoutProduitInput!
}

input CommentProductUpsertWithWhereUniqueWithoutUserInput {
  where: CommentProductWhereUniqueInput!
  update: CommentProductUpdateWithoutUserDataInput!
  create: CommentProductCreateWithoutUserInput!
}

input CommentProductWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentProductWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentProductWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentProductWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  commentaire: String

  """All values that are not equal to given value."""
  commentaire_not: String

  """All values that are contained in given list."""
  commentaire_in: [String!]

  """All values that are not contained in given list."""
  commentaire_not_in: [String!]

  """All values less than the given value."""
  commentaire_lt: String

  """All values less than or equal the given value."""
  commentaire_lte: String

  """All values greater than the given value."""
  commentaire_gt: String

  """All values greater than or equal the given value."""
  commentaire_gte: String

  """All values containing the given string."""
  commentaire_contains: String

  """All values not containing the given string."""
  commentaire_not_contains: String

  """All values starting with the given string."""
  commentaire_starts_with: String

  """All values not starting with the given string."""
  commentaire_not_starts_with: String

  """All values ending with the given string."""
  commentaire_ends_with: String

  """All values not ending with the given string."""
  commentaire_not_ends_with: String
  note: Int

  """All values that are not equal to given value."""
  note_not: Int

  """All values that are contained in given list."""
  note_in: [Int!]

  """All values that are not contained in given list."""
  note_not_in: [Int!]

  """All values less than the given value."""
  note_lt: Int

  """All values less than or equal the given value."""
  note_lte: Int

  """All values greater than the given value."""
  note_gt: Int

  """All values greater than or equal the given value."""
  note_gte: Int
  produit: ProductWhereInput
  user: UserWhereInput
}

input CommentProductWhereUniqueInput {
  id: ID
}

type Delivery implements Node {
  id: ID!
  commande(where: OrderWhereInput): Order!
  tarifdelivery: String!
  deliverydate: String
  deliverymode: String
}

"""A connection to a list of items."""
type DeliveryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DeliveryEdge]!
  aggregate: AggregateDelivery!
}

input DeliveryCreateInput {
  tarifdelivery: String!
  deliverydate: String
  deliverymode: String
  commande: OrderCreateOneWithoutLivraisonInput!
}

input DeliveryCreateManyWithoutCommandeInput {
  create: [DeliveryCreateWithoutCommandeInput!]
  connect: [DeliveryWhereUniqueInput!]
}

input DeliveryCreateWithoutCommandeInput {
  tarifdelivery: String!
  deliverydate: String
  deliverymode: String
}

"""An edge in a connection."""
type DeliveryEdge {
  """The item at the end of the edge."""
  node: Delivery!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DeliveryOrderByInput {
  id_ASC
  id_DESC
  tarifdelivery_ASC
  tarifdelivery_DESC
  deliverydate_ASC
  deliverydate_DESC
  deliverymode_ASC
  deliverymode_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type DeliveryPreviousValues {
  id: ID!
  tarifdelivery: String!
  deliverydate: String
  deliverymode: String
}

type DeliverySubscriptionPayload {
  mutation: MutationType!
  node: Delivery
  updatedFields: [String!]
  previousValues: DeliveryPreviousValues
}

input DeliverySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DeliverySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DeliverySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DeliverySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DeliveryWhereInput
}

input DeliveryUpdateInput {
  tarifdelivery: String
  deliverydate: String
  deliverymode: String
  commande: OrderUpdateOneWithoutLivraisonInput
}

input DeliveryUpdateManyWithoutCommandeInput {
  create: [DeliveryCreateWithoutCommandeInput!]
  connect: [DeliveryWhereUniqueInput!]
  disconnect: [DeliveryWhereUniqueInput!]
  delete: [DeliveryWhereUniqueInput!]
  update: [DeliveryUpdateWithWhereUniqueWithoutCommandeInput!]
  upsert: [DeliveryUpsertWithWhereUniqueWithoutCommandeInput!]
}

input DeliveryUpdateWithoutCommandeDataInput {
  tarifdelivery: String
  deliverydate: String
  deliverymode: String
}

input DeliveryUpdateWithWhereUniqueWithoutCommandeInput {
  where: DeliveryWhereUniqueInput!
  data: DeliveryUpdateWithoutCommandeDataInput!
}

input DeliveryUpsertWithWhereUniqueWithoutCommandeInput {
  where: DeliveryWhereUniqueInput!
  update: DeliveryUpdateWithoutCommandeDataInput!
  create: DeliveryCreateWithoutCommandeInput!
}

input DeliveryWhereInput {
  """Logical AND on all given filters."""
  AND: [DeliveryWhereInput!]

  """Logical OR on all given filters."""
  OR: [DeliveryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DeliveryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  tarifdelivery: String

  """All values that are not equal to given value."""
  tarifdelivery_not: String

  """All values that are contained in given list."""
  tarifdelivery_in: [String!]

  """All values that are not contained in given list."""
  tarifdelivery_not_in: [String!]

  """All values less than the given value."""
  tarifdelivery_lt: String

  """All values less than or equal the given value."""
  tarifdelivery_lte: String

  """All values greater than the given value."""
  tarifdelivery_gt: String

  """All values greater than or equal the given value."""
  tarifdelivery_gte: String

  """All values containing the given string."""
  tarifdelivery_contains: String

  """All values not containing the given string."""
  tarifdelivery_not_contains: String

  """All values starting with the given string."""
  tarifdelivery_starts_with: String

  """All values not starting with the given string."""
  tarifdelivery_not_starts_with: String

  """All values ending with the given string."""
  tarifdelivery_ends_with: String

  """All values not ending with the given string."""
  tarifdelivery_not_ends_with: String
  deliverydate: String

  """All values that are not equal to given value."""
  deliverydate_not: String

  """All values that are contained in given list."""
  deliverydate_in: [String!]

  """All values that are not contained in given list."""
  deliverydate_not_in: [String!]

  """All values less than the given value."""
  deliverydate_lt: String

  """All values less than or equal the given value."""
  deliverydate_lte: String

  """All values greater than the given value."""
  deliverydate_gt: String

  """All values greater than or equal the given value."""
  deliverydate_gte: String

  """All values containing the given string."""
  deliverydate_contains: String

  """All values not containing the given string."""
  deliverydate_not_contains: String

  """All values starting with the given string."""
  deliverydate_starts_with: String

  """All values not starting with the given string."""
  deliverydate_not_starts_with: String

  """All values ending with the given string."""
  deliverydate_ends_with: String

  """All values not ending with the given string."""
  deliverydate_not_ends_with: String
  deliverymode: String

  """All values that are not equal to given value."""
  deliverymode_not: String

  """All values that are contained in given list."""
  deliverymode_in: [String!]

  """All values that are not contained in given list."""
  deliverymode_not_in: [String!]

  """All values less than the given value."""
  deliverymode_lt: String

  """All values less than or equal the given value."""
  deliverymode_lte: String

  """All values greater than the given value."""
  deliverymode_gt: String

  """All values greater than or equal the given value."""
  deliverymode_gte: String

  """All values containing the given string."""
  deliverymode_contains: String

  """All values not containing the given string."""
  deliverymode_not_contains: String

  """All values starting with the given string."""
  deliverymode_starts_with: String

  """All values not starting with the given string."""
  deliverymode_not_starts_with: String

  """All values ending with the given string."""
  deliverymode_ends_with: String

  """All values not ending with the given string."""
  deliverymode_not_ends_with: String
  commande: OrderWhereInput
}

input DeliveryWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type MessageClient implements Node {
  id: ID!
  name: String!
  email: String!
  object: String!
  message: String
}

"""A connection to a list of items."""
type MessageClientConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MessageClientEdge]!
  aggregate: AggregateMessageClient!
}

input MessageClientCreateInput {
  name: String!
  email: String!
  object: String!
  message: String
}

"""An edge in a connection."""
type MessageClientEdge {
  """The item at the end of the edge."""
  node: MessageClient!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MessageClientOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  object_ASC
  object_DESC
  message_ASC
  message_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type MessageClientPreviousValues {
  id: ID!
  name: String!
  email: String!
  object: String!
  message: String
}

type MessageClientSubscriptionPayload {
  mutation: MutationType!
  node: MessageClient
  updatedFields: [String!]
  previousValues: MessageClientPreviousValues
}

input MessageClientSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MessageClientSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MessageClientSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MessageClientSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MessageClientWhereInput
}

input MessageClientUpdateInput {
  name: String
  email: String
  object: String
  message: String
}

input MessageClientWhereInput {
  """Logical AND on all given filters."""
  AND: [MessageClientWhereInput!]

  """Logical OR on all given filters."""
  OR: [MessageClientWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MessageClientWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  object: String

  """All values that are not equal to given value."""
  object_not: String

  """All values that are contained in given list."""
  object_in: [String!]

  """All values that are not contained in given list."""
  object_not_in: [String!]

  """All values less than the given value."""
  object_lt: String

  """All values less than or equal the given value."""
  object_lte: String

  """All values greater than the given value."""
  object_gt: String

  """All values greater than or equal the given value."""
  object_gte: String

  """All values containing the given string."""
  object_contains: String

  """All values not containing the given string."""
  object_not_contains: String

  """All values starting with the given string."""
  object_starts_with: String

  """All values not starting with the given string."""
  object_not_starts_with: String

  """All values ending with the given string."""
  object_ends_with: String

  """All values not ending with the given string."""
  object_not_ends_with: String
  message: String

  """All values that are not equal to given value."""
  message_not: String

  """All values that are contained in given list."""
  message_in: [String!]

  """All values that are not contained in given list."""
  message_not_in: [String!]

  """All values less than the given value."""
  message_lt: String

  """All values less than or equal the given value."""
  message_lte: String

  """All values greater than the given value."""
  message_gt: String

  """All values greater than or equal the given value."""
  message_gte: String

  """All values containing the given string."""
  message_contains: String

  """All values not containing the given string."""
  message_not_contains: String

  """All values starting with the given string."""
  message_starts_with: String

  """All values not starting with the given string."""
  message_not_starts_with: String

  """All values ending with the given string."""
  message_ends_with: String

  """All values not ending with the given string."""
  message_not_ends_with: String
}

input MessageClientWhereUniqueInput {
  id: ID
}

type Mutation {
  createUser(data: UserCreateInput!): User!
  createCategory(data: CategoryCreateInput!): Category!
  createProduct(data: ProductCreateInput!): Product!
  createPhotoProduct(data: PhotoProductCreateInput!): PhotoProduct!
  createPhoto(data: PhotoCreateInput!): Photo!
  createCarte(data: CarteCreateInput!): Carte!
  createColis(data: ColisCreateInput!): Colis!
  createCommentProduct(data: CommentProductCreateInput!): CommentProduct!
  createDelivery(data: DeliveryCreateInput!): Delivery!
  createMessageClient(data: MessageClientCreateInput!): MessageClient!
  createOrder(data: OrderCreateInput!): Order!
  createPromotion(data: PromotionCreateInput!): Promotion!
  createReactionProduct(data: ReactionProductCreateInput!): ReactionProduct!
  createStatus(data: StatusCreateInput!): Status!
  createStock(data: StockCreateInput!): Stock!
  createTarif(data: TarifCreateInput!): Tarif!
  createSupplier(data: SupplierCreateInput!): Supplier!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updatePhotoProduct(data: PhotoProductUpdateInput!, where: PhotoProductWhereUniqueInput!): PhotoProduct
  updatePhoto(data: PhotoUpdateInput!, where: PhotoWhereUniqueInput!): Photo
  updateCarte(data: CarteUpdateInput!, where: CarteWhereUniqueInput!): Carte
  updateColis(data: ColisUpdateInput!, where: ColisWhereUniqueInput!): Colis
  updateCommentProduct(data: CommentProductUpdateInput!, where: CommentProductWhereUniqueInput!): CommentProduct
  updateDelivery(data: DeliveryUpdateInput!, where: DeliveryWhereUniqueInput!): Delivery
  updateMessageClient(data: MessageClientUpdateInput!, where: MessageClientWhereUniqueInput!): MessageClient
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updatePromotion(data: PromotionUpdateInput!, where: PromotionWhereUniqueInput!): Promotion
  updateReactionProduct(data: ReactionProductUpdateInput!, where: ReactionProductWhereUniqueInput!): ReactionProduct
  updateStatus(data: StatusUpdateInput!, where: StatusWhereUniqueInput!): Status
  updateStock(data: StockUpdateInput!, where: StockWhereUniqueInput!): Stock
  updateTarif(data: TarifUpdateInput!, where: TarifWhereUniqueInput!): Tarif
  updateSupplier(data: SupplierUpdateInput!, where: SupplierWhereUniqueInput!): Supplier
  deleteUser(where: UserWhereUniqueInput!): User
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deletePhotoProduct(where: PhotoProductWhereUniqueInput!): PhotoProduct
  deletePhoto(where: PhotoWhereUniqueInput!): Photo
  deleteCarte(where: CarteWhereUniqueInput!): Carte
  deleteColis(where: ColisWhereUniqueInput!): Colis
  deleteCommentProduct(where: CommentProductWhereUniqueInput!): CommentProduct
  deleteDelivery(where: DeliveryWhereUniqueInput!): Delivery
  deleteMessageClient(where: MessageClientWhereUniqueInput!): MessageClient
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deletePromotion(where: PromotionWhereUniqueInput!): Promotion
  deleteReactionProduct(where: ReactionProductWhereUniqueInput!): ReactionProduct
  deleteStatus(where: StatusWhereUniqueInput!): Status
  deleteStock(where: StockWhereUniqueInput!): Stock
  deleteTarif(where: TarifWhereUniqueInput!): Tarif
  deleteSupplier(where: SupplierWhereUniqueInput!): Supplier
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertCategory(where: CategoryWhereUniqueInput!, create: CategoryCreateInput!, update: CategoryUpdateInput!): Category!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  upsertPhotoProduct(where: PhotoProductWhereUniqueInput!, create: PhotoProductCreateInput!, update: PhotoProductUpdateInput!): PhotoProduct!
  upsertPhoto(where: PhotoWhereUniqueInput!, create: PhotoCreateInput!, update: PhotoUpdateInput!): Photo!
  upsertCarte(where: CarteWhereUniqueInput!, create: CarteCreateInput!, update: CarteUpdateInput!): Carte!
  upsertColis(where: ColisWhereUniqueInput!, create: ColisCreateInput!, update: ColisUpdateInput!): Colis!
  upsertCommentProduct(where: CommentProductWhereUniqueInput!, create: CommentProductCreateInput!, update: CommentProductUpdateInput!): CommentProduct!
  upsertDelivery(where: DeliveryWhereUniqueInput!, create: DeliveryCreateInput!, update: DeliveryUpdateInput!): Delivery!
  upsertMessageClient(where: MessageClientWhereUniqueInput!, create: MessageClientCreateInput!, update: MessageClientUpdateInput!): MessageClient!
  upsertOrder(where: OrderWhereUniqueInput!, create: OrderCreateInput!, update: OrderUpdateInput!): Order!
  upsertPromotion(where: PromotionWhereUniqueInput!, create: PromotionCreateInput!, update: PromotionUpdateInput!): Promotion!
  upsertReactionProduct(where: ReactionProductWhereUniqueInput!, create: ReactionProductCreateInput!, update: ReactionProductUpdateInput!): ReactionProduct!
  upsertStatus(where: StatusWhereUniqueInput!, create: StatusCreateInput!, update: StatusUpdateInput!): Status!
  upsertStock(where: StockWhereUniqueInput!, create: StockCreateInput!, update: StockUpdateInput!): Stock!
  upsertTarif(where: TarifWhereUniqueInput!, create: TarifCreateInput!, update: TarifUpdateInput!): Tarif!
  upsertSupplier(where: SupplierWhereUniqueInput!, create: SupplierCreateInput!, update: SupplierUpdateInput!): Supplier!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyCategories(data: CategoryUpdateInput!, where: CategoryWhereInput): BatchPayload!
  updateManyProducts(data: ProductUpdateInput!, where: ProductWhereInput): BatchPayload!
  updateManyPhotoProducts(data: PhotoProductUpdateInput!, where: PhotoProductWhereInput): BatchPayload!
  updateManyPhotos(data: PhotoUpdateInput!, where: PhotoWhereInput): BatchPayload!
  updateManyCartes(data: CarteUpdateInput!, where: CarteWhereInput): BatchPayload!
  updateManyColises(data: ColisUpdateInput!, where: ColisWhereInput): BatchPayload!
  updateManyCommentProducts(data: CommentProductUpdateInput!, where: CommentProductWhereInput): BatchPayload!
  updateManyDeliveries(data: DeliveryUpdateInput!, where: DeliveryWhereInput): BatchPayload!
  updateManyMessageClients(data: MessageClientUpdateInput!, where: MessageClientWhereInput): BatchPayload!
  updateManyOrders(data: OrderUpdateInput!, where: OrderWhereInput): BatchPayload!
  updateManyPromotions(data: PromotionUpdateInput!, where: PromotionWhereInput): BatchPayload!
  updateManyReactionProducts(data: ReactionProductUpdateInput!, where: ReactionProductWhereInput): BatchPayload!
  updateManyStatuses(data: StatusUpdateInput!, where: StatusWhereInput): BatchPayload!
  updateManyStocks(data: StockUpdateInput!, where: StockWhereInput): BatchPayload!
  updateManyTarifs(data: TarifUpdateInput!, where: TarifWhereInput): BatchPayload!
  updateManySuppliers(data: SupplierUpdateInput!, where: SupplierWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  deleteManyPhotoProducts(where: PhotoProductWhereInput): BatchPayload!
  deleteManyPhotos(where: PhotoWhereInput): BatchPayload!
  deleteManyCartes(where: CarteWhereInput): BatchPayload!
  deleteManyColises(where: ColisWhereInput): BatchPayload!
  deleteManyCommentProducts(where: CommentProductWhereInput): BatchPayload!
  deleteManyDeliveries(where: DeliveryWhereInput): BatchPayload!
  deleteManyMessageClients(where: MessageClientWhereInput): BatchPayload!
  deleteManyOrders(where: OrderWhereInput): BatchPayload!
  deleteManyPromotions(where: PromotionWhereInput): BatchPayload!
  deleteManyReactionProducts(where: ReactionProductWhereInput): BatchPayload!
  deleteManyStatuses(where: StatusWhereInput): BatchPayload!
  deleteManyStocks(where: StockWhereInput): BatchPayload!
  deleteManyTarifs(where: TarifWhereInput): BatchPayload!
  deleteManySuppliers(where: SupplierWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Order implements Node {
  id: ID!
  user(where: UserWhereInput): User!
  poids: String
  comment: String
  validatingDate: String
  validator: String
  totalPrice: Int
  status(where: StatusWhereInput): Status!
  carte(where: CarteWhereInput, orderBy: CarteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Carte!]
  livraison(where: DeliveryWhereInput, orderBy: DeliveryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Delivery!]
}

"""A connection to a list of items."""
type OrderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OrderEdge]!
  aggregate: AggregateOrder!
}

input OrderCreateInput {
  poids: String
  comment: String
  validatingDate: String
  validator: String
  totalPrice: Int
  user: UserCreateOneWithoutCommandeInput!
  status: StatusCreateOneWithoutCommandeInput!
  carte: CarteCreateManyWithoutCommandeInput
  livraison: DeliveryCreateManyWithoutCommandeInput
}

input OrderCreateManyWithoutStatusInput {
  create: [OrderCreateWithoutStatusInput!]
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateManyWithoutUserInput {
  create: [OrderCreateWithoutUserInput!]
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateOneWithoutCarteInput {
  create: OrderCreateWithoutCarteInput
  connect: OrderWhereUniqueInput
}

input OrderCreateOneWithoutLivraisonInput {
  create: OrderCreateWithoutLivraisonInput
  connect: OrderWhereUniqueInput
}

input OrderCreateWithoutCarteInput {
  poids: String
  comment: String
  validatingDate: String
  validator: String
  totalPrice: Int
  user: UserCreateOneWithoutCommandeInput!
  status: StatusCreateOneWithoutCommandeInput!
  livraison: DeliveryCreateManyWithoutCommandeInput
}

input OrderCreateWithoutLivraisonInput {
  poids: String
  comment: String
  validatingDate: String
  validator: String
  totalPrice: Int
  user: UserCreateOneWithoutCommandeInput!
  status: StatusCreateOneWithoutCommandeInput!
  carte: CarteCreateManyWithoutCommandeInput
}

input OrderCreateWithoutStatusInput {
  poids: String
  comment: String
  validatingDate: String
  validator: String
  totalPrice: Int
  user: UserCreateOneWithoutCommandeInput!
  carte: CarteCreateManyWithoutCommandeInput
  livraison: DeliveryCreateManyWithoutCommandeInput
}

input OrderCreateWithoutUserInput {
  poids: String
  comment: String
  validatingDate: String
  validator: String
  totalPrice: Int
  status: StatusCreateOneWithoutCommandeInput!
  carte: CarteCreateManyWithoutCommandeInput
  livraison: DeliveryCreateManyWithoutCommandeInput
}

"""An edge in a connection."""
type OrderEdge {
  """The item at the end of the edge."""
  node: Order!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OrderOrderByInput {
  id_ASC
  id_DESC
  poids_ASC
  poids_DESC
  comment_ASC
  comment_DESC
  validatingDate_ASC
  validatingDate_DESC
  validator_ASC
  validator_DESC
  totalPrice_ASC
  totalPrice_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type OrderPreviousValues {
  id: ID!
  poids: String
  comment: String
  validatingDate: String
  validator: String
  totalPrice: Int
}

type OrderSubscriptionPayload {
  mutation: MutationType!
  node: Order
  updatedFields: [String!]
  previousValues: OrderPreviousValues
}

input OrderSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OrderWhereInput
}

input OrderUpdateInput {
  poids: String
  comment: String
  validatingDate: String
  validator: String
  totalPrice: Int
  user: UserUpdateOneWithoutCommandeInput
  status: StatusUpdateOneWithoutCommandeInput
  carte: CarteUpdateManyWithoutCommandeInput
  livraison: DeliveryUpdateManyWithoutCommandeInput
}

input OrderUpdateManyWithoutStatusInput {
  create: [OrderCreateWithoutStatusInput!]
  connect: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  delete: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutStatusInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutStatusInput!]
}

input OrderUpdateManyWithoutUserInput {
  create: [OrderCreateWithoutUserInput!]
  connect: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  delete: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutUserInput!]
}

input OrderUpdateOneWithoutCarteInput {
  create: OrderCreateWithoutCarteInput
  connect: OrderWhereUniqueInput
  delete: Boolean
  update: OrderUpdateWithoutCarteDataInput
  upsert: OrderUpsertWithoutCarteInput
}

input OrderUpdateOneWithoutLivraisonInput {
  create: OrderCreateWithoutLivraisonInput
  connect: OrderWhereUniqueInput
  delete: Boolean
  update: OrderUpdateWithoutLivraisonDataInput
  upsert: OrderUpsertWithoutLivraisonInput
}

input OrderUpdateWithoutCarteDataInput {
  poids: String
  comment: String
  validatingDate: String
  validator: String
  totalPrice: Int
  user: UserUpdateOneWithoutCommandeInput
  status: StatusUpdateOneWithoutCommandeInput
  livraison: DeliveryUpdateManyWithoutCommandeInput
}

input OrderUpdateWithoutLivraisonDataInput {
  poids: String
  comment: String
  validatingDate: String
  validator: String
  totalPrice: Int
  user: UserUpdateOneWithoutCommandeInput
  status: StatusUpdateOneWithoutCommandeInput
  carte: CarteUpdateManyWithoutCommandeInput
}

input OrderUpdateWithoutStatusDataInput {
  poids: String
  comment: String
  validatingDate: String
  validator: String
  totalPrice: Int
  user: UserUpdateOneWithoutCommandeInput
  carte: CarteUpdateManyWithoutCommandeInput
  livraison: DeliveryUpdateManyWithoutCommandeInput
}

input OrderUpdateWithoutUserDataInput {
  poids: String
  comment: String
  validatingDate: String
  validator: String
  totalPrice: Int
  status: StatusUpdateOneWithoutCommandeInput
  carte: CarteUpdateManyWithoutCommandeInput
  livraison: DeliveryUpdateManyWithoutCommandeInput
}

input OrderUpdateWithWhereUniqueWithoutStatusInput {
  where: OrderWhereUniqueInput!
  data: OrderUpdateWithoutStatusDataInput!
}

input OrderUpdateWithWhereUniqueWithoutUserInput {
  where: OrderWhereUniqueInput!
  data: OrderUpdateWithoutUserDataInput!
}

input OrderUpsertWithoutCarteInput {
  update: OrderUpdateWithoutCarteDataInput!
  create: OrderCreateWithoutCarteInput!
}

input OrderUpsertWithoutLivraisonInput {
  update: OrderUpdateWithoutLivraisonDataInput!
  create: OrderCreateWithoutLivraisonInput!
}

input OrderUpsertWithWhereUniqueWithoutStatusInput {
  where: OrderWhereUniqueInput!
  update: OrderUpdateWithoutStatusDataInput!
  create: OrderCreateWithoutStatusInput!
}

input OrderUpsertWithWhereUniqueWithoutUserInput {
  where: OrderWhereUniqueInput!
  update: OrderUpdateWithoutUserDataInput!
  create: OrderCreateWithoutUserInput!
}

input OrderWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  poids: String

  """All values that are not equal to given value."""
  poids_not: String

  """All values that are contained in given list."""
  poids_in: [String!]

  """All values that are not contained in given list."""
  poids_not_in: [String!]

  """All values less than the given value."""
  poids_lt: String

  """All values less than or equal the given value."""
  poids_lte: String

  """All values greater than the given value."""
  poids_gt: String

  """All values greater than or equal the given value."""
  poids_gte: String

  """All values containing the given string."""
  poids_contains: String

  """All values not containing the given string."""
  poids_not_contains: String

  """All values starting with the given string."""
  poids_starts_with: String

  """All values not starting with the given string."""
  poids_not_starts_with: String

  """All values ending with the given string."""
  poids_ends_with: String

  """All values not ending with the given string."""
  poids_not_ends_with: String
  comment: String

  """All values that are not equal to given value."""
  comment_not: String

  """All values that are contained in given list."""
  comment_in: [String!]

  """All values that are not contained in given list."""
  comment_not_in: [String!]

  """All values less than the given value."""
  comment_lt: String

  """All values less than or equal the given value."""
  comment_lte: String

  """All values greater than the given value."""
  comment_gt: String

  """All values greater than or equal the given value."""
  comment_gte: String

  """All values containing the given string."""
  comment_contains: String

  """All values not containing the given string."""
  comment_not_contains: String

  """All values starting with the given string."""
  comment_starts_with: String

  """All values not starting with the given string."""
  comment_not_starts_with: String

  """All values ending with the given string."""
  comment_ends_with: String

  """All values not ending with the given string."""
  comment_not_ends_with: String
  validatingDate: String

  """All values that are not equal to given value."""
  validatingDate_not: String

  """All values that are contained in given list."""
  validatingDate_in: [String!]

  """All values that are not contained in given list."""
  validatingDate_not_in: [String!]

  """All values less than the given value."""
  validatingDate_lt: String

  """All values less than or equal the given value."""
  validatingDate_lte: String

  """All values greater than the given value."""
  validatingDate_gt: String

  """All values greater than or equal the given value."""
  validatingDate_gte: String

  """All values containing the given string."""
  validatingDate_contains: String

  """All values not containing the given string."""
  validatingDate_not_contains: String

  """All values starting with the given string."""
  validatingDate_starts_with: String

  """All values not starting with the given string."""
  validatingDate_not_starts_with: String

  """All values ending with the given string."""
  validatingDate_ends_with: String

  """All values not ending with the given string."""
  validatingDate_not_ends_with: String
  validator: String

  """All values that are not equal to given value."""
  validator_not: String

  """All values that are contained in given list."""
  validator_in: [String!]

  """All values that are not contained in given list."""
  validator_not_in: [String!]

  """All values less than the given value."""
  validator_lt: String

  """All values less than or equal the given value."""
  validator_lte: String

  """All values greater than the given value."""
  validator_gt: String

  """All values greater than or equal the given value."""
  validator_gte: String

  """All values containing the given string."""
  validator_contains: String

  """All values not containing the given string."""
  validator_not_contains: String

  """All values starting with the given string."""
  validator_starts_with: String

  """All values not starting with the given string."""
  validator_not_starts_with: String

  """All values ending with the given string."""
  validator_ends_with: String

  """All values not ending with the given string."""
  validator_not_ends_with: String
  totalPrice: Int

  """All values that are not equal to given value."""
  totalPrice_not: Int

  """All values that are contained in given list."""
  totalPrice_in: [Int!]

  """All values that are not contained in given list."""
  totalPrice_not_in: [Int!]

  """All values less than the given value."""
  totalPrice_lt: Int

  """All values less than or equal the given value."""
  totalPrice_lte: Int

  """All values greater than the given value."""
  totalPrice_gt: Int

  """All values greater than or equal the given value."""
  totalPrice_gte: Int
  user: UserWhereInput
  status: StatusWhereInput
  carte_every: CarteWhereInput
  carte_some: CarteWhereInput
  carte_none: CarteWhereInput
  livraison_every: DeliveryWhereInput
  livraison_some: DeliveryWhereInput
  livraison_none: DeliveryWhereInput
}

input OrderWhereUniqueInput {
  id: ID
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Photo implements Node {
  id: ID!
  url: String
  title: String
  user(where: UserWhereInput): User!
}

"""A connection to a list of items."""
type PhotoConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PhotoEdge]!
  aggregate: AggregatePhoto!
}

input PhotoCreateInput {
  url: String
  title: String
  user: UserCreateOneWithoutImageInput!
}

input PhotoCreateManyWithoutUserInput {
  create: [PhotoCreateWithoutUserInput!]
  connect: [PhotoWhereUniqueInput!]
}

input PhotoCreateWithoutUserInput {
  url: String
  title: String
}

"""An edge in a connection."""
type PhotoEdge {
  """The item at the end of the edge."""
  node: Photo!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PhotoOrderByInput {
  id_ASC
  id_DESC
  url_ASC
  url_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PhotoPreviousValues {
  id: ID!
  url: String
  title: String
}

type PhotoProduct implements Node {
  id: ID!
  url: String
  title: String
  produit(where: ProductWhereInput): Product!
}

"""A connection to a list of items."""
type PhotoProductConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PhotoProductEdge]!
  aggregate: AggregatePhotoProduct!
}

input PhotoProductCreateInput {
  url: String
  title: String
  produit: ProductCreateOneWithoutImageInput!
}

input PhotoProductCreateManyWithoutProduitInput {
  create: [PhotoProductCreateWithoutProduitInput!]
  connect: [PhotoProductWhereUniqueInput!]
}

input PhotoProductCreateWithoutProduitInput {
  url: String
  title: String
}

"""An edge in a connection."""
type PhotoProductEdge {
  """The item at the end of the edge."""
  node: PhotoProduct!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PhotoProductOrderByInput {
  id_ASC
  id_DESC
  url_ASC
  url_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PhotoProductPreviousValues {
  id: ID!
  url: String
  title: String
}

type PhotoProductSubscriptionPayload {
  mutation: MutationType!
  node: PhotoProduct
  updatedFields: [String!]
  previousValues: PhotoProductPreviousValues
}

input PhotoProductSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PhotoProductSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PhotoProductSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PhotoProductSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PhotoProductWhereInput
}

input PhotoProductUpdateInput {
  url: String
  title: String
  produit: ProductUpdateOneWithoutImageInput
}

input PhotoProductUpdateManyWithoutProduitInput {
  create: [PhotoProductCreateWithoutProduitInput!]
  connect: [PhotoProductWhereUniqueInput!]
  disconnect: [PhotoProductWhereUniqueInput!]
  delete: [PhotoProductWhereUniqueInput!]
  update: [PhotoProductUpdateWithWhereUniqueWithoutProduitInput!]
  upsert: [PhotoProductUpsertWithWhereUniqueWithoutProduitInput!]
}

input PhotoProductUpdateWithoutProduitDataInput {
  url: String
  title: String
}

input PhotoProductUpdateWithWhereUniqueWithoutProduitInput {
  where: PhotoProductWhereUniqueInput!
  data: PhotoProductUpdateWithoutProduitDataInput!
}

input PhotoProductUpsertWithWhereUniqueWithoutProduitInput {
  where: PhotoProductWhereUniqueInput!
  update: PhotoProductUpdateWithoutProduitDataInput!
  create: PhotoProductCreateWithoutProduitInput!
}

input PhotoProductWhereInput {
  """Logical AND on all given filters."""
  AND: [PhotoProductWhereInput!]

  """Logical OR on all given filters."""
  OR: [PhotoProductWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PhotoProductWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  produit: ProductWhereInput
}

input PhotoProductWhereUniqueInput {
  id: ID
}

type PhotoSubscriptionPayload {
  mutation: MutationType!
  node: Photo
  updatedFields: [String!]
  previousValues: PhotoPreviousValues
}

input PhotoSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PhotoSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PhotoSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PhotoSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PhotoWhereInput
}

input PhotoUpdateInput {
  url: String
  title: String
  user: UserUpdateOneWithoutImageInput
}

input PhotoUpdateManyWithoutUserInput {
  create: [PhotoCreateWithoutUserInput!]
  connect: [PhotoWhereUniqueInput!]
  disconnect: [PhotoWhereUniqueInput!]
  delete: [PhotoWhereUniqueInput!]
  update: [PhotoUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [PhotoUpsertWithWhereUniqueWithoutUserInput!]
}

input PhotoUpdateWithoutUserDataInput {
  url: String
  title: String
}

input PhotoUpdateWithWhereUniqueWithoutUserInput {
  where: PhotoWhereUniqueInput!
  data: PhotoUpdateWithoutUserDataInput!
}

input PhotoUpsertWithWhereUniqueWithoutUserInput {
  where: PhotoWhereUniqueInput!
  update: PhotoUpdateWithoutUserDataInput!
  create: PhotoCreateWithoutUserInput!
}

input PhotoWhereInput {
  """Logical AND on all given filters."""
  AND: [PhotoWhereInput!]

  """Logical OR on all given filters."""
  OR: [PhotoWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PhotoWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  user: UserWhereInput
}

input PhotoWhereUniqueInput {
  id: ID
}

type Product implements Node {
  id: ID!
  name: String
  description: String
  category(where: CategoryWhereInput): Category!
  image(where: PhotoProductWhereInput, orderBy: PhotoProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PhotoProduct!]
  carte(where: CarteWhereInput, orderBy: CarteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Carte!]
  colis(where: ColisWhereInput, orderBy: ColisOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Colis!]
  promotion(where: PromotionWhereInput, orderBy: PromotionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Promotion!]
  commentaire(where: CommentProductWhereInput, orderBy: CommentProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CommentProduct!]
  reactionproduit(where: ReactionProductWhereInput, orderBy: ReactionProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ReactionProduct!]
  stock(where: StockWhereInput, orderBy: StockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Stock!]
  tarif(where: TarifWhereInput, orderBy: TarifOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tarif!]
}

"""A connection to a list of items."""
type ProductConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  name: String
  description: String
  category: CategoryCreateOneWithoutProduitInput!
  image: PhotoProductCreateManyWithoutProduitInput
  carte: CarteCreateManyWithoutProduitInput
  colis: ColisCreateManyWithoutProduitInput
  promotion: PromotionCreateManyWithoutProduitInput
  commentaire: CommentProductCreateManyWithoutProduitInput
  reactionproduit: ReactionProductCreateManyWithoutProduitInput
  stock: StockCreateManyWithoutProduitInput
  tarif: TarifCreateManyWithoutProduitInput
}

input ProductCreateManyWithoutCategoryInput {
  create: [ProductCreateWithoutCategoryInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateOneWithoutCarteInput {
  create: ProductCreateWithoutCarteInput
  connect: ProductWhereUniqueInput
}

input ProductCreateOneWithoutColisInput {
  create: ProductCreateWithoutColisInput
  connect: ProductWhereUniqueInput
}

input ProductCreateOneWithoutCommentaireInput {
  create: ProductCreateWithoutCommentaireInput
  connect: ProductWhereUniqueInput
}

input ProductCreateOneWithoutImageInput {
  create: ProductCreateWithoutImageInput
  connect: ProductWhereUniqueInput
}

input ProductCreateOneWithoutPromotionInput {
  create: ProductCreateWithoutPromotionInput
  connect: ProductWhereUniqueInput
}

input ProductCreateOneWithoutReactionproduitInput {
  create: ProductCreateWithoutReactionproduitInput
  connect: ProductWhereUniqueInput
}

input ProductCreateOneWithoutStockInput {
  create: ProductCreateWithoutStockInput
  connect: ProductWhereUniqueInput
}

input ProductCreateOneWithoutTarifInput {
  create: ProductCreateWithoutTarifInput
  connect: ProductWhereUniqueInput
}

input ProductCreateWithoutCarteInput {
  name: String
  description: String
  category: CategoryCreateOneWithoutProduitInput!
  image: PhotoProductCreateManyWithoutProduitInput
  colis: ColisCreateManyWithoutProduitInput
  promotion: PromotionCreateManyWithoutProduitInput
  commentaire: CommentProductCreateManyWithoutProduitInput
  reactionproduit: ReactionProductCreateManyWithoutProduitInput
  stock: StockCreateManyWithoutProduitInput
  tarif: TarifCreateManyWithoutProduitInput
}

input ProductCreateWithoutCategoryInput {
  name: String
  description: String
  image: PhotoProductCreateManyWithoutProduitInput
  carte: CarteCreateManyWithoutProduitInput
  colis: ColisCreateManyWithoutProduitInput
  promotion: PromotionCreateManyWithoutProduitInput
  commentaire: CommentProductCreateManyWithoutProduitInput
  reactionproduit: ReactionProductCreateManyWithoutProduitInput
  stock: StockCreateManyWithoutProduitInput
  tarif: TarifCreateManyWithoutProduitInput
}

input ProductCreateWithoutColisInput {
  name: String
  description: String
  category: CategoryCreateOneWithoutProduitInput!
  image: PhotoProductCreateManyWithoutProduitInput
  carte: CarteCreateManyWithoutProduitInput
  promotion: PromotionCreateManyWithoutProduitInput
  commentaire: CommentProductCreateManyWithoutProduitInput
  reactionproduit: ReactionProductCreateManyWithoutProduitInput
  stock: StockCreateManyWithoutProduitInput
  tarif: TarifCreateManyWithoutProduitInput
}

input ProductCreateWithoutCommentaireInput {
  name: String
  description: String
  category: CategoryCreateOneWithoutProduitInput!
  image: PhotoProductCreateManyWithoutProduitInput
  carte: CarteCreateManyWithoutProduitInput
  colis: ColisCreateManyWithoutProduitInput
  promotion: PromotionCreateManyWithoutProduitInput
  reactionproduit: ReactionProductCreateManyWithoutProduitInput
  stock: StockCreateManyWithoutProduitInput
  tarif: TarifCreateManyWithoutProduitInput
}

input ProductCreateWithoutImageInput {
  name: String
  description: String
  category: CategoryCreateOneWithoutProduitInput!
  carte: CarteCreateManyWithoutProduitInput
  colis: ColisCreateManyWithoutProduitInput
  promotion: PromotionCreateManyWithoutProduitInput
  commentaire: CommentProductCreateManyWithoutProduitInput
  reactionproduit: ReactionProductCreateManyWithoutProduitInput
  stock: StockCreateManyWithoutProduitInput
  tarif: TarifCreateManyWithoutProduitInput
}

input ProductCreateWithoutPromotionInput {
  name: String
  description: String
  category: CategoryCreateOneWithoutProduitInput!
  image: PhotoProductCreateManyWithoutProduitInput
  carte: CarteCreateManyWithoutProduitInput
  colis: ColisCreateManyWithoutProduitInput
  commentaire: CommentProductCreateManyWithoutProduitInput
  reactionproduit: ReactionProductCreateManyWithoutProduitInput
  stock: StockCreateManyWithoutProduitInput
  tarif: TarifCreateManyWithoutProduitInput
}

input ProductCreateWithoutReactionproduitInput {
  name: String
  description: String
  category: CategoryCreateOneWithoutProduitInput!
  image: PhotoProductCreateManyWithoutProduitInput
  carte: CarteCreateManyWithoutProduitInput
  colis: ColisCreateManyWithoutProduitInput
  promotion: PromotionCreateManyWithoutProduitInput
  commentaire: CommentProductCreateManyWithoutProduitInput
  stock: StockCreateManyWithoutProduitInput
  tarif: TarifCreateManyWithoutProduitInput
}

input ProductCreateWithoutStockInput {
  name: String
  description: String
  category: CategoryCreateOneWithoutProduitInput!
  image: PhotoProductCreateManyWithoutProduitInput
  carte: CarteCreateManyWithoutProduitInput
  colis: ColisCreateManyWithoutProduitInput
  promotion: PromotionCreateManyWithoutProduitInput
  commentaire: CommentProductCreateManyWithoutProduitInput
  reactionproduit: ReactionProductCreateManyWithoutProduitInput
  tarif: TarifCreateManyWithoutProduitInput
}

input ProductCreateWithoutTarifInput {
  name: String
  description: String
  category: CategoryCreateOneWithoutProduitInput!
  image: PhotoProductCreateManyWithoutProduitInput
  carte: CarteCreateManyWithoutProduitInput
  colis: ColisCreateManyWithoutProduitInput
  promotion: PromotionCreateManyWithoutProduitInput
  commentaire: CommentProductCreateManyWithoutProduitInput
  reactionproduit: ReactionProductCreateManyWithoutProduitInput
  stock: StockCreateManyWithoutProduitInput
}

"""An edge in a connection."""
type ProductEdge {
  """The item at the end of the edge."""
  node: Product!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProductPreviousValues {
  id: ID!
  name: String
  description: String
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
}

input ProductUpdateInput {
  name: String
  description: String
  category: CategoryUpdateOneWithoutProduitInput
  image: PhotoProductUpdateManyWithoutProduitInput
  carte: CarteUpdateManyWithoutProduitInput
  colis: ColisUpdateManyWithoutProduitInput
  promotion: PromotionUpdateManyWithoutProduitInput
  commentaire: CommentProductUpdateManyWithoutProduitInput
  reactionproduit: ReactionProductUpdateManyWithoutProduitInput
  stock: StockUpdateManyWithoutProduitInput
  tarif: TarifUpdateManyWithoutProduitInput
}

input ProductUpdateManyWithoutCategoryInput {
  create: [ProductCreateWithoutCategoryInput!]
  connect: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  delete: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutCategoryInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutCategoryInput!]
}

input ProductUpdateOneWithoutCarteInput {
  create: ProductCreateWithoutCarteInput
  connect: ProductWhereUniqueInput
  delete: Boolean
  update: ProductUpdateWithoutCarteDataInput
  upsert: ProductUpsertWithoutCarteInput
}

input ProductUpdateOneWithoutColisInput {
  create: ProductCreateWithoutColisInput
  connect: ProductWhereUniqueInput
  delete: Boolean
  update: ProductUpdateWithoutColisDataInput
  upsert: ProductUpsertWithoutColisInput
}

input ProductUpdateOneWithoutCommentaireInput {
  create: ProductCreateWithoutCommentaireInput
  connect: ProductWhereUniqueInput
  delete: Boolean
  update: ProductUpdateWithoutCommentaireDataInput
  upsert: ProductUpsertWithoutCommentaireInput
}

input ProductUpdateOneWithoutImageInput {
  create: ProductCreateWithoutImageInput
  connect: ProductWhereUniqueInput
  delete: Boolean
  update: ProductUpdateWithoutImageDataInput
  upsert: ProductUpsertWithoutImageInput
}

input ProductUpdateOneWithoutPromotionInput {
  create: ProductCreateWithoutPromotionInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProductUpdateWithoutPromotionDataInput
  upsert: ProductUpsertWithoutPromotionInput
}

input ProductUpdateOneWithoutReactionproduitInput {
  create: ProductCreateWithoutReactionproduitInput
  connect: ProductWhereUniqueInput
  delete: Boolean
  update: ProductUpdateWithoutReactionproduitDataInput
  upsert: ProductUpsertWithoutReactionproduitInput
}

input ProductUpdateOneWithoutStockInput {
  create: ProductCreateWithoutStockInput
  connect: ProductWhereUniqueInput
  delete: Boolean
  update: ProductUpdateWithoutStockDataInput
  upsert: ProductUpsertWithoutStockInput
}

input ProductUpdateOneWithoutTarifInput {
  create: ProductCreateWithoutTarifInput
  connect: ProductWhereUniqueInput
  delete: Boolean
  update: ProductUpdateWithoutTarifDataInput
  upsert: ProductUpsertWithoutTarifInput
}

input ProductUpdateWithoutCarteDataInput {
  name: String
  description: String
  category: CategoryUpdateOneWithoutProduitInput
  image: PhotoProductUpdateManyWithoutProduitInput
  colis: ColisUpdateManyWithoutProduitInput
  promotion: PromotionUpdateManyWithoutProduitInput
  commentaire: CommentProductUpdateManyWithoutProduitInput
  reactionproduit: ReactionProductUpdateManyWithoutProduitInput
  stock: StockUpdateManyWithoutProduitInput
  tarif: TarifUpdateManyWithoutProduitInput
}

input ProductUpdateWithoutCategoryDataInput {
  name: String
  description: String
  image: PhotoProductUpdateManyWithoutProduitInput
  carte: CarteUpdateManyWithoutProduitInput
  colis: ColisUpdateManyWithoutProduitInput
  promotion: PromotionUpdateManyWithoutProduitInput
  commentaire: CommentProductUpdateManyWithoutProduitInput
  reactionproduit: ReactionProductUpdateManyWithoutProduitInput
  stock: StockUpdateManyWithoutProduitInput
  tarif: TarifUpdateManyWithoutProduitInput
}

input ProductUpdateWithoutColisDataInput {
  name: String
  description: String
  category: CategoryUpdateOneWithoutProduitInput
  image: PhotoProductUpdateManyWithoutProduitInput
  carte: CarteUpdateManyWithoutProduitInput
  promotion: PromotionUpdateManyWithoutProduitInput
  commentaire: CommentProductUpdateManyWithoutProduitInput
  reactionproduit: ReactionProductUpdateManyWithoutProduitInput
  stock: StockUpdateManyWithoutProduitInput
  tarif: TarifUpdateManyWithoutProduitInput
}

input ProductUpdateWithoutCommentaireDataInput {
  name: String
  description: String
  category: CategoryUpdateOneWithoutProduitInput
  image: PhotoProductUpdateManyWithoutProduitInput
  carte: CarteUpdateManyWithoutProduitInput
  colis: ColisUpdateManyWithoutProduitInput
  promotion: PromotionUpdateManyWithoutProduitInput
  reactionproduit: ReactionProductUpdateManyWithoutProduitInput
  stock: StockUpdateManyWithoutProduitInput
  tarif: TarifUpdateManyWithoutProduitInput
}

input ProductUpdateWithoutImageDataInput {
  name: String
  description: String
  category: CategoryUpdateOneWithoutProduitInput
  carte: CarteUpdateManyWithoutProduitInput
  colis: ColisUpdateManyWithoutProduitInput
  promotion: PromotionUpdateManyWithoutProduitInput
  commentaire: CommentProductUpdateManyWithoutProduitInput
  reactionproduit: ReactionProductUpdateManyWithoutProduitInput
  stock: StockUpdateManyWithoutProduitInput
  tarif: TarifUpdateManyWithoutProduitInput
}

input ProductUpdateWithoutPromotionDataInput {
  name: String
  description: String
  category: CategoryUpdateOneWithoutProduitInput
  image: PhotoProductUpdateManyWithoutProduitInput
  carte: CarteUpdateManyWithoutProduitInput
  colis: ColisUpdateManyWithoutProduitInput
  commentaire: CommentProductUpdateManyWithoutProduitInput
  reactionproduit: ReactionProductUpdateManyWithoutProduitInput
  stock: StockUpdateManyWithoutProduitInput
  tarif: TarifUpdateManyWithoutProduitInput
}

input ProductUpdateWithoutReactionproduitDataInput {
  name: String
  description: String
  category: CategoryUpdateOneWithoutProduitInput
  image: PhotoProductUpdateManyWithoutProduitInput
  carte: CarteUpdateManyWithoutProduitInput
  colis: ColisUpdateManyWithoutProduitInput
  promotion: PromotionUpdateManyWithoutProduitInput
  commentaire: CommentProductUpdateManyWithoutProduitInput
  stock: StockUpdateManyWithoutProduitInput
  tarif: TarifUpdateManyWithoutProduitInput
}

input ProductUpdateWithoutStockDataInput {
  name: String
  description: String
  category: CategoryUpdateOneWithoutProduitInput
  image: PhotoProductUpdateManyWithoutProduitInput
  carte: CarteUpdateManyWithoutProduitInput
  colis: ColisUpdateManyWithoutProduitInput
  promotion: PromotionUpdateManyWithoutProduitInput
  commentaire: CommentProductUpdateManyWithoutProduitInput
  reactionproduit: ReactionProductUpdateManyWithoutProduitInput
  tarif: TarifUpdateManyWithoutProduitInput
}

input ProductUpdateWithoutTarifDataInput {
  name: String
  description: String
  category: CategoryUpdateOneWithoutProduitInput
  image: PhotoProductUpdateManyWithoutProduitInput
  carte: CarteUpdateManyWithoutProduitInput
  colis: ColisUpdateManyWithoutProduitInput
  promotion: PromotionUpdateManyWithoutProduitInput
  commentaire: CommentProductUpdateManyWithoutProduitInput
  reactionproduit: ReactionProductUpdateManyWithoutProduitInput
  stock: StockUpdateManyWithoutProduitInput
}

input ProductUpdateWithWhereUniqueWithoutCategoryInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutCategoryDataInput!
}

input ProductUpsertWithoutCarteInput {
  update: ProductUpdateWithoutCarteDataInput!
  create: ProductCreateWithoutCarteInput!
}

input ProductUpsertWithoutColisInput {
  update: ProductUpdateWithoutColisDataInput!
  create: ProductCreateWithoutColisInput!
}

input ProductUpsertWithoutCommentaireInput {
  update: ProductUpdateWithoutCommentaireDataInput!
  create: ProductCreateWithoutCommentaireInput!
}

input ProductUpsertWithoutImageInput {
  update: ProductUpdateWithoutImageDataInput!
  create: ProductCreateWithoutImageInput!
}

input ProductUpsertWithoutPromotionInput {
  update: ProductUpdateWithoutPromotionDataInput!
  create: ProductCreateWithoutPromotionInput!
}

input ProductUpsertWithoutReactionproduitInput {
  update: ProductUpdateWithoutReactionproduitDataInput!
  create: ProductCreateWithoutReactionproduitInput!
}

input ProductUpsertWithoutStockInput {
  update: ProductUpdateWithoutStockDataInput!
  create: ProductCreateWithoutStockInput!
}

input ProductUpsertWithoutTarifInput {
  update: ProductUpdateWithoutTarifDataInput!
  create: ProductCreateWithoutTarifInput!
}

input ProductUpsertWithWhereUniqueWithoutCategoryInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutCategoryDataInput!
  create: ProductCreateWithoutCategoryInput!
}

input ProductWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  category: CategoryWhereInput
  image_every: PhotoProductWhereInput
  image_some: PhotoProductWhereInput
  image_none: PhotoProductWhereInput
  carte_every: CarteWhereInput
  carte_some: CarteWhereInput
  carte_none: CarteWhereInput
  colis_every: ColisWhereInput
  colis_some: ColisWhereInput
  colis_none: ColisWhereInput
  promotion_every: PromotionWhereInput
  promotion_some: PromotionWhereInput
  promotion_none: PromotionWhereInput
  commentaire_every: CommentProductWhereInput
  commentaire_some: CommentProductWhereInput
  commentaire_none: CommentProductWhereInput
  reactionproduit_every: ReactionProductWhereInput
  reactionproduit_some: ReactionProductWhereInput
  reactionproduit_none: ReactionProductWhereInput
  stock_every: StockWhereInput
  stock_some: StockWhereInput
  stock_none: StockWhereInput
  tarif_every: TarifWhereInput
  tarif_some: TarifWhereInput
  tarif_none: TarifWhereInput
}

input ProductWhereUniqueInput {
  id: ID
}

type Promotion implements Node {
  id: ID!
  produit(where: ProductWhereInput): Product
  categorie(where: CategoryWhereInput): Category
  datedebut: String!
  datefin: String!
  pourcentage: Int!
}

"""A connection to a list of items."""
type PromotionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PromotionEdge]!
  aggregate: AggregatePromotion!
}

input PromotionCreateInput {
  datedebut: String!
  datefin: String!
  pourcentage: Int!
  produit: ProductCreateOneWithoutPromotionInput
  categorie: CategoryCreateOneWithoutPromotionInput
}

input PromotionCreateManyWithoutCategorieInput {
  create: [PromotionCreateWithoutCategorieInput!]
  connect: [PromotionWhereUniqueInput!]
}

input PromotionCreateManyWithoutProduitInput {
  create: [PromotionCreateWithoutProduitInput!]
  connect: [PromotionWhereUniqueInput!]
}

input PromotionCreateWithoutCategorieInput {
  datedebut: String!
  datefin: String!
  pourcentage: Int!
  produit: ProductCreateOneWithoutPromotionInput
}

input PromotionCreateWithoutProduitInput {
  datedebut: String!
  datefin: String!
  pourcentage: Int!
  categorie: CategoryCreateOneWithoutPromotionInput
}

"""An edge in a connection."""
type PromotionEdge {
  """The item at the end of the edge."""
  node: Promotion!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PromotionOrderByInput {
  id_ASC
  id_DESC
  datedebut_ASC
  datedebut_DESC
  datefin_ASC
  datefin_DESC
  pourcentage_ASC
  pourcentage_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PromotionPreviousValues {
  id: ID!
  datedebut: String!
  datefin: String!
  pourcentage: Int!
}

type PromotionSubscriptionPayload {
  mutation: MutationType!
  node: Promotion
  updatedFields: [String!]
  previousValues: PromotionPreviousValues
}

input PromotionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PromotionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PromotionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PromotionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PromotionWhereInput
}

input PromotionUpdateInput {
  datedebut: String
  datefin: String
  pourcentage: Int
  produit: ProductUpdateOneWithoutPromotionInput
  categorie: CategoryUpdateOneWithoutPromotionInput
}

input PromotionUpdateManyWithoutCategorieInput {
  create: [PromotionCreateWithoutCategorieInput!]
  connect: [PromotionWhereUniqueInput!]
  disconnect: [PromotionWhereUniqueInput!]
  delete: [PromotionWhereUniqueInput!]
  update: [PromotionUpdateWithWhereUniqueWithoutCategorieInput!]
  upsert: [PromotionUpsertWithWhereUniqueWithoutCategorieInput!]
}

input PromotionUpdateManyWithoutProduitInput {
  create: [PromotionCreateWithoutProduitInput!]
  connect: [PromotionWhereUniqueInput!]
  disconnect: [PromotionWhereUniqueInput!]
  delete: [PromotionWhereUniqueInput!]
  update: [PromotionUpdateWithWhereUniqueWithoutProduitInput!]
  upsert: [PromotionUpsertWithWhereUniqueWithoutProduitInput!]
}

input PromotionUpdateWithoutCategorieDataInput {
  datedebut: String
  datefin: String
  pourcentage: Int
  produit: ProductUpdateOneWithoutPromotionInput
}

input PromotionUpdateWithoutProduitDataInput {
  datedebut: String
  datefin: String
  pourcentage: Int
  categorie: CategoryUpdateOneWithoutPromotionInput
}

input PromotionUpdateWithWhereUniqueWithoutCategorieInput {
  where: PromotionWhereUniqueInput!
  data: PromotionUpdateWithoutCategorieDataInput!
}

input PromotionUpdateWithWhereUniqueWithoutProduitInput {
  where: PromotionWhereUniqueInput!
  data: PromotionUpdateWithoutProduitDataInput!
}

input PromotionUpsertWithWhereUniqueWithoutCategorieInput {
  where: PromotionWhereUniqueInput!
  update: PromotionUpdateWithoutCategorieDataInput!
  create: PromotionCreateWithoutCategorieInput!
}

input PromotionUpsertWithWhereUniqueWithoutProduitInput {
  where: PromotionWhereUniqueInput!
  update: PromotionUpdateWithoutProduitDataInput!
  create: PromotionCreateWithoutProduitInput!
}

input PromotionWhereInput {
  """Logical AND on all given filters."""
  AND: [PromotionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PromotionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PromotionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  datedebut: String

  """All values that are not equal to given value."""
  datedebut_not: String

  """All values that are contained in given list."""
  datedebut_in: [String!]

  """All values that are not contained in given list."""
  datedebut_not_in: [String!]

  """All values less than the given value."""
  datedebut_lt: String

  """All values less than or equal the given value."""
  datedebut_lte: String

  """All values greater than the given value."""
  datedebut_gt: String

  """All values greater than or equal the given value."""
  datedebut_gte: String

  """All values containing the given string."""
  datedebut_contains: String

  """All values not containing the given string."""
  datedebut_not_contains: String

  """All values starting with the given string."""
  datedebut_starts_with: String

  """All values not starting with the given string."""
  datedebut_not_starts_with: String

  """All values ending with the given string."""
  datedebut_ends_with: String

  """All values not ending with the given string."""
  datedebut_not_ends_with: String
  datefin: String

  """All values that are not equal to given value."""
  datefin_not: String

  """All values that are contained in given list."""
  datefin_in: [String!]

  """All values that are not contained in given list."""
  datefin_not_in: [String!]

  """All values less than the given value."""
  datefin_lt: String

  """All values less than or equal the given value."""
  datefin_lte: String

  """All values greater than the given value."""
  datefin_gt: String

  """All values greater than or equal the given value."""
  datefin_gte: String

  """All values containing the given string."""
  datefin_contains: String

  """All values not containing the given string."""
  datefin_not_contains: String

  """All values starting with the given string."""
  datefin_starts_with: String

  """All values not starting with the given string."""
  datefin_not_starts_with: String

  """All values ending with the given string."""
  datefin_ends_with: String

  """All values not ending with the given string."""
  datefin_not_ends_with: String
  pourcentage: Int

  """All values that are not equal to given value."""
  pourcentage_not: Int

  """All values that are contained in given list."""
  pourcentage_in: [Int!]

  """All values that are not contained in given list."""
  pourcentage_not_in: [Int!]

  """All values less than the given value."""
  pourcentage_lt: Int

  """All values less than or equal the given value."""
  pourcentage_lte: Int

  """All values greater than the given value."""
  pourcentage_gt: Int

  """All values greater than or equal the given value."""
  pourcentage_gte: Int
  produit: ProductWhereInput
  categorie: CategoryWhereInput
}

input PromotionWhereUniqueInput {
  id: ID
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  photoProducts(where: PhotoProductWhereInput, orderBy: PhotoProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PhotoProduct]!
  photos(where: PhotoWhereInput, orderBy: PhotoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Photo]!
  cartes(where: CarteWhereInput, orderBy: CarteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Carte]!
  colises(where: ColisWhereInput, orderBy: ColisOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Colis]!
  commentProducts(where: CommentProductWhereInput, orderBy: CommentProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CommentProduct]!
  deliveries(where: DeliveryWhereInput, orderBy: DeliveryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Delivery]!
  messageClients(where: MessageClientWhereInput, orderBy: MessageClientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MessageClient]!
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order]!
  promotions(where: PromotionWhereInput, orderBy: PromotionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Promotion]!
  reactionProducts(where: ReactionProductWhereInput, orderBy: ReactionProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ReactionProduct]!
  statuses(where: StatusWhereInput, orderBy: StatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Status]!
  stocks(where: StockWhereInput, orderBy: StockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Stock]!
  tarifs(where: TarifWhereInput, orderBy: TarifOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tarif]!
  suppliers(where: SupplierWhereInput, orderBy: SupplierOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Supplier]!
  user(where: UserWhereUniqueInput!): User
  category(where: CategoryWhereUniqueInput!): Category
  product(where: ProductWhereUniqueInput!): Product
  photoProduct(where: PhotoProductWhereUniqueInput!): PhotoProduct
  photo(where: PhotoWhereUniqueInput!): Photo
  carte(where: CarteWhereUniqueInput!): Carte
  colis(where: ColisWhereUniqueInput!): Colis
  commentProduct(where: CommentProductWhereUniqueInput!): CommentProduct
  delivery(where: DeliveryWhereUniqueInput!): Delivery
  messageClient(where: MessageClientWhereUniqueInput!): MessageClient
  order(where: OrderWhereUniqueInput!): Order
  promotion(where: PromotionWhereUniqueInput!): Promotion
  reactionProduct(where: ReactionProductWhereUniqueInput!): ReactionProduct
  status(where: StatusWhereUniqueInput!): Status
  stock(where: StockWhereUniqueInput!): Stock
  tarif(where: TarifWhereUniqueInput!): Tarif
  supplier(where: SupplierWhereUniqueInput!): Supplier
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  categoriesConnection(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  photoProductsConnection(where: PhotoProductWhereInput, orderBy: PhotoProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PhotoProductConnection!
  photosConnection(where: PhotoWhereInput, orderBy: PhotoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PhotoConnection!
  cartesConnection(where: CarteWhereInput, orderBy: CarteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CarteConnection!
  colisesConnection(where: ColisWhereInput, orderBy: ColisOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ColisConnection!
  commentProductsConnection(where: CommentProductWhereInput, orderBy: CommentProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentProductConnection!
  deliveriesConnection(where: DeliveryWhereInput, orderBy: DeliveryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DeliveryConnection!
  messageClientsConnection(where: MessageClientWhereInput, orderBy: MessageClientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MessageClientConnection!
  ordersConnection(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderConnection!
  promotionsConnection(where: PromotionWhereInput, orderBy: PromotionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PromotionConnection!
  reactionProductsConnection(where: ReactionProductWhereInput, orderBy: ReactionProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReactionProductConnection!
  statusesConnection(where: StatusWhereInput, orderBy: StatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StatusConnection!
  stocksConnection(where: StockWhereInput, orderBy: StockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StockConnection!
  tarifsConnection(where: TarifWhereInput, orderBy: TarifOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TarifConnection!
  suppliersConnection(where: SupplierWhereInput, orderBy: SupplierOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SupplierConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type ReactionProduct implements Node {
  id: ID!
  produit(where: ProductWhereInput): Product!
  user(where: UserWhereInput): User!
  reaction: Int
}

"""A connection to a list of items."""
type ReactionProductConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ReactionProductEdge]!
  aggregate: AggregateReactionProduct!
}

input ReactionProductCreateInput {
  reaction: Int
  produit: ProductCreateOneWithoutReactionproduitInput!
  user: UserCreateOneWithoutReactionproduitInput!
}

input ReactionProductCreateManyWithoutProduitInput {
  create: [ReactionProductCreateWithoutProduitInput!]
  connect: [ReactionProductWhereUniqueInput!]
}

input ReactionProductCreateManyWithoutUserInput {
  create: [ReactionProductCreateWithoutUserInput!]
  connect: [ReactionProductWhereUniqueInput!]
}

input ReactionProductCreateWithoutProduitInput {
  reaction: Int
  user: UserCreateOneWithoutReactionproduitInput!
}

input ReactionProductCreateWithoutUserInput {
  reaction: Int
  produit: ProductCreateOneWithoutReactionproduitInput!
}

"""An edge in a connection."""
type ReactionProductEdge {
  """The item at the end of the edge."""
  node: ReactionProduct!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ReactionProductOrderByInput {
  id_ASC
  id_DESC
  reaction_ASC
  reaction_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ReactionProductPreviousValues {
  id: ID!
  reaction: Int
}

type ReactionProductSubscriptionPayload {
  mutation: MutationType!
  node: ReactionProduct
  updatedFields: [String!]
  previousValues: ReactionProductPreviousValues
}

input ReactionProductSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ReactionProductSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReactionProductSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReactionProductSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ReactionProductWhereInput
}

input ReactionProductUpdateInput {
  reaction: Int
  produit: ProductUpdateOneWithoutReactionproduitInput
  user: UserUpdateOneWithoutReactionproduitInput
}

input ReactionProductUpdateManyWithoutProduitInput {
  create: [ReactionProductCreateWithoutProduitInput!]
  connect: [ReactionProductWhereUniqueInput!]
  disconnect: [ReactionProductWhereUniqueInput!]
  delete: [ReactionProductWhereUniqueInput!]
  update: [ReactionProductUpdateWithWhereUniqueWithoutProduitInput!]
  upsert: [ReactionProductUpsertWithWhereUniqueWithoutProduitInput!]
}

input ReactionProductUpdateManyWithoutUserInput {
  create: [ReactionProductCreateWithoutUserInput!]
  connect: [ReactionProductWhereUniqueInput!]
  disconnect: [ReactionProductWhereUniqueInput!]
  delete: [ReactionProductWhereUniqueInput!]
  update: [ReactionProductUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ReactionProductUpsertWithWhereUniqueWithoutUserInput!]
}

input ReactionProductUpdateWithoutProduitDataInput {
  reaction: Int
  user: UserUpdateOneWithoutReactionproduitInput
}

input ReactionProductUpdateWithoutUserDataInput {
  reaction: Int
  produit: ProductUpdateOneWithoutReactionproduitInput
}

input ReactionProductUpdateWithWhereUniqueWithoutProduitInput {
  where: ReactionProductWhereUniqueInput!
  data: ReactionProductUpdateWithoutProduitDataInput!
}

input ReactionProductUpdateWithWhereUniqueWithoutUserInput {
  where: ReactionProductWhereUniqueInput!
  data: ReactionProductUpdateWithoutUserDataInput!
}

input ReactionProductUpsertWithWhereUniqueWithoutProduitInput {
  where: ReactionProductWhereUniqueInput!
  update: ReactionProductUpdateWithoutProduitDataInput!
  create: ReactionProductCreateWithoutProduitInput!
}

input ReactionProductUpsertWithWhereUniqueWithoutUserInput {
  where: ReactionProductWhereUniqueInput!
  update: ReactionProductUpdateWithoutUserDataInput!
  create: ReactionProductCreateWithoutUserInput!
}

input ReactionProductWhereInput {
  """Logical AND on all given filters."""
  AND: [ReactionProductWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReactionProductWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReactionProductWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  reaction: Int

  """All values that are not equal to given value."""
  reaction_not: Int

  """All values that are contained in given list."""
  reaction_in: [Int!]

  """All values that are not contained in given list."""
  reaction_not_in: [Int!]

  """All values less than the given value."""
  reaction_lt: Int

  """All values less than or equal the given value."""
  reaction_lte: Int

  """All values greater than the given value."""
  reaction_gt: Int

  """All values greater than or equal the given value."""
  reaction_gte: Int
  produit: ProductWhereInput
  user: UserWhereInput
}

input ReactionProductWhereUniqueInput {
  id: ID
}

type Status implements Node {
  id: ID!
  cle: String!
  libelle: String!
  commande(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order!]
}

"""A connection to a list of items."""
type StatusConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StatusEdge]!
  aggregate: AggregateStatus!
}

input StatusCreateInput {
  cle: String!
  libelle: String!
  commande: OrderCreateManyWithoutStatusInput
}

input StatusCreateOneWithoutCommandeInput {
  create: StatusCreateWithoutCommandeInput
  connect: StatusWhereUniqueInput
}

input StatusCreateWithoutCommandeInput {
  cle: String!
  libelle: String!
}

"""An edge in a connection."""
type StatusEdge {
  """The item at the end of the edge."""
  node: Status!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StatusOrderByInput {
  id_ASC
  id_DESC
  cle_ASC
  cle_DESC
  libelle_ASC
  libelle_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type StatusPreviousValues {
  id: ID!
  cle: String!
  libelle: String!
}

type StatusSubscriptionPayload {
  mutation: MutationType!
  node: Status
  updatedFields: [String!]
  previousValues: StatusPreviousValues
}

input StatusSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StatusSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StatusSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StatusSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StatusWhereInput
}

input StatusUpdateInput {
  cle: String
  libelle: String
  commande: OrderUpdateManyWithoutStatusInput
}

input StatusUpdateOneWithoutCommandeInput {
  create: StatusCreateWithoutCommandeInput
  connect: StatusWhereUniqueInput
  delete: Boolean
  update: StatusUpdateWithoutCommandeDataInput
  upsert: StatusUpsertWithoutCommandeInput
}

input StatusUpdateWithoutCommandeDataInput {
  cle: String
  libelle: String
}

input StatusUpsertWithoutCommandeInput {
  update: StatusUpdateWithoutCommandeDataInput!
  create: StatusCreateWithoutCommandeInput!
}

input StatusWhereInput {
  """Logical AND on all given filters."""
  AND: [StatusWhereInput!]

  """Logical OR on all given filters."""
  OR: [StatusWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StatusWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  cle: String

  """All values that are not equal to given value."""
  cle_not: String

  """All values that are contained in given list."""
  cle_in: [String!]

  """All values that are not contained in given list."""
  cle_not_in: [String!]

  """All values less than the given value."""
  cle_lt: String

  """All values less than or equal the given value."""
  cle_lte: String

  """All values greater than the given value."""
  cle_gt: String

  """All values greater than or equal the given value."""
  cle_gte: String

  """All values containing the given string."""
  cle_contains: String

  """All values not containing the given string."""
  cle_not_contains: String

  """All values starting with the given string."""
  cle_starts_with: String

  """All values not starting with the given string."""
  cle_not_starts_with: String

  """All values ending with the given string."""
  cle_ends_with: String

  """All values not ending with the given string."""
  cle_not_ends_with: String
  libelle: String

  """All values that are not equal to given value."""
  libelle_not: String

  """All values that are contained in given list."""
  libelle_in: [String!]

  """All values that are not contained in given list."""
  libelle_not_in: [String!]

  """All values less than the given value."""
  libelle_lt: String

  """All values less than or equal the given value."""
  libelle_lte: String

  """All values greater than the given value."""
  libelle_gt: String

  """All values greater than or equal the given value."""
  libelle_gte: String

  """All values containing the given string."""
  libelle_contains: String

  """All values not containing the given string."""
  libelle_not_contains: String

  """All values starting with the given string."""
  libelle_starts_with: String

  """All values not starting with the given string."""
  libelle_not_starts_with: String

  """All values ending with the given string."""
  libelle_ends_with: String

  """All values not ending with the given string."""
  libelle_not_ends_with: String
  commande_every: OrderWhereInput
  commande_some: OrderWhereInput
  commande_none: OrderWhereInput
}

input StatusWhereUniqueInput {
  id: ID
  cle: String
}

type Stock implements Node {
  id: ID!
  produit(where: ProductWhereInput): Product!
  stockuc: Int!
  type: Int!
}

"""A connection to a list of items."""
type StockConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StockEdge]!
  aggregate: AggregateStock!
}

input StockCreateInput {
  stockuc: Int!
  type: Int!
  produit: ProductCreateOneWithoutStockInput!
}

input StockCreateManyWithoutProduitInput {
  create: [StockCreateWithoutProduitInput!]
  connect: [StockWhereUniqueInput!]
}

input StockCreateWithoutProduitInput {
  stockuc: Int!
  type: Int!
}

"""An edge in a connection."""
type StockEdge {
  """The item at the end of the edge."""
  node: Stock!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StockOrderByInput {
  id_ASC
  id_DESC
  stockuc_ASC
  stockuc_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type StockPreviousValues {
  id: ID!
  stockuc: Int!
  type: Int!
}

type StockSubscriptionPayload {
  mutation: MutationType!
  node: Stock
  updatedFields: [String!]
  previousValues: StockPreviousValues
}

input StockSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StockSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StockSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StockSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StockWhereInput
}

input StockUpdateInput {
  stockuc: Int
  type: Int
  produit: ProductUpdateOneWithoutStockInput
}

input StockUpdateManyWithoutProduitInput {
  create: [StockCreateWithoutProduitInput!]
  connect: [StockWhereUniqueInput!]
  disconnect: [StockWhereUniqueInput!]
  delete: [StockWhereUniqueInput!]
  update: [StockUpdateWithWhereUniqueWithoutProduitInput!]
  upsert: [StockUpsertWithWhereUniqueWithoutProduitInput!]
}

input StockUpdateWithoutProduitDataInput {
  stockuc: Int
  type: Int
}

input StockUpdateWithWhereUniqueWithoutProduitInput {
  where: StockWhereUniqueInput!
  data: StockUpdateWithoutProduitDataInput!
}

input StockUpsertWithWhereUniqueWithoutProduitInput {
  where: StockWhereUniqueInput!
  update: StockUpdateWithoutProduitDataInput!
  create: StockCreateWithoutProduitInput!
}

input StockWhereInput {
  """Logical AND on all given filters."""
  AND: [StockWhereInput!]

  """Logical OR on all given filters."""
  OR: [StockWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StockWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  stockuc: Int

  """All values that are not equal to given value."""
  stockuc_not: Int

  """All values that are contained in given list."""
  stockuc_in: [Int!]

  """All values that are not contained in given list."""
  stockuc_not_in: [Int!]

  """All values less than the given value."""
  stockuc_lt: Int

  """All values less than or equal the given value."""
  stockuc_lte: Int

  """All values greater than the given value."""
  stockuc_gt: Int

  """All values greater than or equal the given value."""
  stockuc_gte: Int
  type: Int

  """All values that are not equal to given value."""
  type_not: Int

  """All values that are contained in given list."""
  type_in: [Int!]

  """All values that are not contained in given list."""
  type_not_in: [Int!]

  """All values less than the given value."""
  type_lt: Int

  """All values less than or equal the given value."""
  type_lte: Int

  """All values greater than the given value."""
  type_gt: Int

  """All values greater than or equal the given value."""
  type_gte: Int
  produit: ProductWhereInput
}

input StockWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  photoProduct(where: PhotoProductSubscriptionWhereInput): PhotoProductSubscriptionPayload
  photo(where: PhotoSubscriptionWhereInput): PhotoSubscriptionPayload
  carte(where: CarteSubscriptionWhereInput): CarteSubscriptionPayload
  colis(where: ColisSubscriptionWhereInput): ColisSubscriptionPayload
  commentProduct(where: CommentProductSubscriptionWhereInput): CommentProductSubscriptionPayload
  delivery(where: DeliverySubscriptionWhereInput): DeliverySubscriptionPayload
  messageClient(where: MessageClientSubscriptionWhereInput): MessageClientSubscriptionPayload
  order(where: OrderSubscriptionWhereInput): OrderSubscriptionPayload
  promotion(where: PromotionSubscriptionWhereInput): PromotionSubscriptionPayload
  reactionProduct(where: ReactionProductSubscriptionWhereInput): ReactionProductSubscriptionPayload
  status(where: StatusSubscriptionWhereInput): StatusSubscriptionPayload
  stock(where: StockSubscriptionWhereInput): StockSubscriptionPayload
  tarif(where: TarifSubscriptionWhereInput): TarifSubscriptionPayload
  supplier(where: SupplierSubscriptionWhereInput): SupplierSubscriptionPayload
}

type Supplier implements Node {
  id: ID!
  firstName: String!
  lastName: String
  email: String!
  address: String
  phone: String
}

"""A connection to a list of items."""
type SupplierConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SupplierEdge]!
  aggregate: AggregateSupplier!
}

input SupplierCreateInput {
  firstName: String!
  lastName: String
  email: String!
  address: String
  phone: String
}

"""An edge in a connection."""
type SupplierEdge {
  """The item at the end of the edge."""
  node: Supplier!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SupplierOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  email_ASC
  email_DESC
  address_ASC
  address_DESC
  phone_ASC
  phone_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SupplierPreviousValues {
  id: ID!
  firstName: String!
  lastName: String
  email: String!
  address: String
  phone: String
}

type SupplierSubscriptionPayload {
  mutation: MutationType!
  node: Supplier
  updatedFields: [String!]
  previousValues: SupplierPreviousValues
}

input SupplierSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SupplierSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SupplierSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SupplierSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SupplierWhereInput
}

input SupplierUpdateInput {
  firstName: String
  lastName: String
  email: String
  address: String
  phone: String
}

input SupplierWhereInput {
  """Logical AND on all given filters."""
  AND: [SupplierWhereInput!]

  """Logical OR on all given filters."""
  OR: [SupplierWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SupplierWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
}

input SupplierWhereUniqueInput {
  id: ID
}

type Tarif implements Node {
  id: ID!
  produit(where: ProductWhereInput): Product!
  prixht: Int!
  prixpvc: Int!
  datedebutvalidite: String
}

"""A connection to a list of items."""
type TarifConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TarifEdge]!
  aggregate: AggregateTarif!
}

input TarifCreateInput {
  prixht: Int!
  prixpvc: Int!
  datedebutvalidite: String
  produit: ProductCreateOneWithoutTarifInput!
}

input TarifCreateManyWithoutProduitInput {
  create: [TarifCreateWithoutProduitInput!]
  connect: [TarifWhereUniqueInput!]
}

input TarifCreateWithoutProduitInput {
  prixht: Int!
  prixpvc: Int!
  datedebutvalidite: String
}

"""An edge in a connection."""
type TarifEdge {
  """The item at the end of the edge."""
  node: Tarif!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TarifOrderByInput {
  id_ASC
  id_DESC
  prixht_ASC
  prixht_DESC
  prixpvc_ASC
  prixpvc_DESC
  datedebutvalidite_ASC
  datedebutvalidite_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TarifPreviousValues {
  id: ID!
  prixht: Int!
  prixpvc: Int!
  datedebutvalidite: String
}

type TarifSubscriptionPayload {
  mutation: MutationType!
  node: Tarif
  updatedFields: [String!]
  previousValues: TarifPreviousValues
}

input TarifSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TarifSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TarifSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TarifSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TarifWhereInput
}

input TarifUpdateInput {
  prixht: Int
  prixpvc: Int
  datedebutvalidite: String
  produit: ProductUpdateOneWithoutTarifInput
}

input TarifUpdateManyWithoutProduitInput {
  create: [TarifCreateWithoutProduitInput!]
  connect: [TarifWhereUniqueInput!]
  disconnect: [TarifWhereUniqueInput!]
  delete: [TarifWhereUniqueInput!]
  update: [TarifUpdateWithWhereUniqueWithoutProduitInput!]
  upsert: [TarifUpsertWithWhereUniqueWithoutProduitInput!]
}

input TarifUpdateWithoutProduitDataInput {
  prixht: Int
  prixpvc: Int
  datedebutvalidite: String
}

input TarifUpdateWithWhereUniqueWithoutProduitInput {
  where: TarifWhereUniqueInput!
  data: TarifUpdateWithoutProduitDataInput!
}

input TarifUpsertWithWhereUniqueWithoutProduitInput {
  where: TarifWhereUniqueInput!
  update: TarifUpdateWithoutProduitDataInput!
  create: TarifCreateWithoutProduitInput!
}

input TarifWhereInput {
  """Logical AND on all given filters."""
  AND: [TarifWhereInput!]

  """Logical OR on all given filters."""
  OR: [TarifWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TarifWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  prixht: Int

  """All values that are not equal to given value."""
  prixht_not: Int

  """All values that are contained in given list."""
  prixht_in: [Int!]

  """All values that are not contained in given list."""
  prixht_not_in: [Int!]

  """All values less than the given value."""
  prixht_lt: Int

  """All values less than or equal the given value."""
  prixht_lte: Int

  """All values greater than the given value."""
  prixht_gt: Int

  """All values greater than or equal the given value."""
  prixht_gte: Int
  prixpvc: Int

  """All values that are not equal to given value."""
  prixpvc_not: Int

  """All values that are contained in given list."""
  prixpvc_in: [Int!]

  """All values that are not contained in given list."""
  prixpvc_not_in: [Int!]

  """All values less than the given value."""
  prixpvc_lt: Int

  """All values less than or equal the given value."""
  prixpvc_lte: Int

  """All values greater than the given value."""
  prixpvc_gt: Int

  """All values greater than or equal the given value."""
  prixpvc_gte: Int
  datedebutvalidite: String

  """All values that are not equal to given value."""
  datedebutvalidite_not: String

  """All values that are contained in given list."""
  datedebutvalidite_in: [String!]

  """All values that are not contained in given list."""
  datedebutvalidite_not_in: [String!]

  """All values less than the given value."""
  datedebutvalidite_lt: String

  """All values less than or equal the given value."""
  datedebutvalidite_lte: String

  """All values greater than the given value."""
  datedebutvalidite_gt: String

  """All values greater than or equal the given value."""
  datedebutvalidite_gte: String

  """All values containing the given string."""
  datedebutvalidite_contains: String

  """All values not containing the given string."""
  datedebutvalidite_not_contains: String

  """All values starting with the given string."""
  datedebutvalidite_starts_with: String

  """All values not starting with the given string."""
  datedebutvalidite_not_starts_with: String

  """All values ending with the given string."""
  datedebutvalidite_ends_with: String

  """All values not ending with the given string."""
  datedebutvalidite_not_ends_with: String
  produit: ProductWhereInput
}

input TarifWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  firstName: String!
  lastName: String
  email: String!
  password: String!
  address: String
  phone: String
  image(where: PhotoWhereInput, orderBy: PhotoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Photo!]
  commande(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order!]
  commentproduit(where: CommentProductWhereInput, orderBy: CommentProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CommentProduct!]
  reactionproduit(where: ReactionProductWhereInput, orderBy: ReactionProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ReactionProduct!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  firstName: String!
  lastName: String
  email: String!
  password: String!
  address: String
  phone: String
  image: PhotoCreateManyWithoutUserInput
  commande: OrderCreateManyWithoutUserInput
  commentproduit: CommentProductCreateManyWithoutUserInput
  reactionproduit: ReactionProductCreateManyWithoutUserInput
}

input UserCreateOneWithoutCommandeInput {
  create: UserCreateWithoutCommandeInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCommentproduitInput {
  create: UserCreateWithoutCommentproduitInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutImageInput {
  create: UserCreateWithoutImageInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutReactionproduitInput {
  create: UserCreateWithoutReactionproduitInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCommandeInput {
  firstName: String!
  lastName: String
  email: String!
  password: String!
  address: String
  phone: String
  image: PhotoCreateManyWithoutUserInput
  commentproduit: CommentProductCreateManyWithoutUserInput
  reactionproduit: ReactionProductCreateManyWithoutUserInput
}

input UserCreateWithoutCommentproduitInput {
  firstName: String!
  lastName: String
  email: String!
  password: String!
  address: String
  phone: String
  image: PhotoCreateManyWithoutUserInput
  commande: OrderCreateManyWithoutUserInput
  reactionproduit: ReactionProductCreateManyWithoutUserInput
}

input UserCreateWithoutImageInput {
  firstName: String!
  lastName: String
  email: String!
  password: String!
  address: String
  phone: String
  commande: OrderCreateManyWithoutUserInput
  commentproduit: CommentProductCreateManyWithoutUserInput
  reactionproduit: ReactionProductCreateManyWithoutUserInput
}

input UserCreateWithoutReactionproduitInput {
  firstName: String!
  lastName: String
  email: String!
  password: String!
  address: String
  phone: String
  image: PhotoCreateManyWithoutUserInput
  commande: OrderCreateManyWithoutUserInput
  commentproduit: CommentProductCreateManyWithoutUserInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  address_ASC
  address_DESC
  phone_ASC
  phone_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  firstName: String!
  lastName: String
  email: String!
  password: String!
  address: String
  phone: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  firstName: String
  lastName: String
  email: String
  password: String
  address: String
  phone: String
  image: PhotoUpdateManyWithoutUserInput
  commande: OrderUpdateManyWithoutUserInput
  commentproduit: CommentProductUpdateManyWithoutUserInput
  reactionproduit: ReactionProductUpdateManyWithoutUserInput
}

input UserUpdateOneWithoutCommandeInput {
  create: UserCreateWithoutCommandeInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutCommandeDataInput
  upsert: UserUpsertWithoutCommandeInput
}

input UserUpdateOneWithoutCommentproduitInput {
  create: UserCreateWithoutCommentproduitInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutCommentproduitDataInput
  upsert: UserUpsertWithoutCommentproduitInput
}

input UserUpdateOneWithoutImageInput {
  create: UserCreateWithoutImageInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutImageDataInput
  upsert: UserUpsertWithoutImageInput
}

input UserUpdateOneWithoutReactionproduitInput {
  create: UserCreateWithoutReactionproduitInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutReactionproduitDataInput
  upsert: UserUpsertWithoutReactionproduitInput
}

input UserUpdateWithoutCommandeDataInput {
  firstName: String
  lastName: String
  email: String
  password: String
  address: String
  phone: String
  image: PhotoUpdateManyWithoutUserInput
  commentproduit: CommentProductUpdateManyWithoutUserInput
  reactionproduit: ReactionProductUpdateManyWithoutUserInput
}

input UserUpdateWithoutCommentproduitDataInput {
  firstName: String
  lastName: String
  email: String
  password: String
  address: String
  phone: String
  image: PhotoUpdateManyWithoutUserInput
  commande: OrderUpdateManyWithoutUserInput
  reactionproduit: ReactionProductUpdateManyWithoutUserInput
}

input UserUpdateWithoutImageDataInput {
  firstName: String
  lastName: String
  email: String
  password: String
  address: String
  phone: String
  commande: OrderUpdateManyWithoutUserInput
  commentproduit: CommentProductUpdateManyWithoutUserInput
  reactionproduit: ReactionProductUpdateManyWithoutUserInput
}

input UserUpdateWithoutReactionproduitDataInput {
  firstName: String
  lastName: String
  email: String
  password: String
  address: String
  phone: String
  image: PhotoUpdateManyWithoutUserInput
  commande: OrderUpdateManyWithoutUserInput
  commentproduit: CommentProductUpdateManyWithoutUserInput
}

input UserUpsertWithoutCommandeInput {
  update: UserUpdateWithoutCommandeDataInput!
  create: UserCreateWithoutCommandeInput!
}

input UserUpsertWithoutCommentproduitInput {
  update: UserUpdateWithoutCommentproduitDataInput!
  create: UserCreateWithoutCommentproduitInput!
}

input UserUpsertWithoutImageInput {
  update: UserUpdateWithoutImageDataInput!
  create: UserCreateWithoutImageInput!
}

input UserUpsertWithoutReactionproduitInput {
  update: UserUpdateWithoutReactionproduitDataInput!
  create: UserCreateWithoutReactionproduitInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  image_every: PhotoWhereInput
  image_some: PhotoWhereInput
  image_none: PhotoWhereInput
  commande_every: OrderWhereInput
  commande_some: OrderWhereInput
  commande_none: OrderWhereInput
  commentproduit_every: CommentProductWhereInput
  commentproduit_some: CommentProductWhereInput
  commentproduit_none: CommentProductWhereInput
  reactionproduit_every: ReactionProductWhereInput
  reactionproduit_some: ReactionProductWhereInput
  reactionproduit_none: ReactionProductWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
